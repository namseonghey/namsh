//STT 결과조회
import React from 'react';

import {
	ComponentPanel, FullPanel,  RFloatArea, Table, SearchPanel, FlexPanel
} from 'components';
//버튼 컴포넌트
import {BasicButton as Button, Label} from 'components';
import {Textfield, RangeInputCalendar, Selectbox} from 'components';
import {Grid} from 'components';
import {StrLib, TransManager, ComLib, DataLib, newScrmObj, DateLib} from 'common';

class View extends React.Component {
	constructor(props) {
		super();

		this.state = {
			buttonProps : {
				btnSearchProps : {
					id : 'btnJobFileSearchList',
					disabled : false,
					value : '조회',
					hidden : false
				},
			},
			gridSttResultList : {
				areaName : 'STT결과조회',
				id : 'gridSttResultList',
				infoCheckBox :  {
					use : true,
					colId : 'CHK',
				},
				header : 
				[
					{headerName: 'No'		,	field: 'recid',			colId: 'recid',		editable: false, width : '70',}
					,{headerName: '계약번호',	field: 'CTR_NO',			colId: 'CTR_NO',		editable: false, }
					,{headerName: '고객성명',	field: 'CUS_NM',			colId: 'CUS_NM',		editable: false, width : '130', }
					,{headerName: '통화시간',	field: 'CALL_STRT_DTM',		colId: 'CALL_STRT_DTM',	editable: false,}	
					,{headerName: '작업상태',	field: 'STATE',				colId: 'STATE',			editable: false,  width : '130', textAlign: 'center',
					  	valueFormatter : (params) => { return ComLib.getComCodeName('STT_TBL_JOB_SELF_INFO', params.value, 'STATE') }
					}
					,{headerName: '센터',		field: 'CENT_NM',		colId: 'CENT_NM',	editable: false,}
					,{headerName: '팀',			field: 'TEAM_NM',		colId: 'TEAM_NM',	editable: false,}
					,{headerName: '상담원명',	field: 'CS_NM',			colId: 'CS_NM',		editable: false, width : '130',}
					,{headerName: '작업일자',	field: 'REG_DTM',		colId: 'REG_DTM',	editable: false,}	
					,{headerName: '상담내용',	field: 'STATE',			colId: 'PLAY_YN',	cellRenderer : 'showCellRendererPlayCheck',}
				],
				components: { 
					showCellRendererPlayCheck: this.createShowCellRenderer(),
				},
			},
			rangeCalendarProps : {
				rgcSearchJob : {
					label : '작업기간',
					id : 'searchJobDateCalender',
					strtId : 'searchJobDateCalenderStart',
					endId : 'searchJobDateCalenderEnd',
					startDate : DateLib.getToday(),
					endDate : DateLib.getToday(),
				},
				rgcSearchCall : {
					label : '통화기간',
					id : 'searchCallDateCalender',
					strtId : 'searchCallDateCalenderStart',
					endId : 'searchCallDateCalenderEnd',
					startDate : null,
					endDate : null,
				}
			},
			selectboxProps : {
				selSelfFileStateSearch : {
					id : 'selSelfFileStateSearch',
					dataset : ComLib.convComboList(ComLib.getCommCodeList("STT_TBL_JOB_SELF_INFO", "STATE"), newScrmObj.constants.select.argument.all),
					width : '100%',
					selected : 0,
					disabled : false,
					label : "작업상태"
				},
				selCenterList : {
					id : 'selCenterList',
					dataset : ComLib.convComboList(ComLib.getCentList(), newScrmObj.constants.select.argument.all),
					width : '100%',
					selected : 0,
					disabled : false,
					label : "센터"
				},
				selTeamList : {
					id : 'selTeamList',
					width : '100%',
					selected : 0,
					disabled : false,
					label : "팀",
					value : '',

				},
				selUserList : {
					id : 'selUserList',
					width : '100%',
					selected : 0,
					disabled : false,
					label : "상담원명",
					value : '',
				},
				selReqUserList : {
					id : 'selReqUserList',
					width : '100%',
					selected : 0,
					disabled : false,
					label : "요청자명",
					value : '',
				}
			},
			textFieldProps : {
				txtSearchCrtNo : {
					id : 'txtSearchCrtNo',
					name : 'txtSearchCrtNo',
					value : '',
					placeholder : '',
					minLength : 1,
					maxLength : 10,
					readOnly : false,
					disabled : false,
					label : '계약번호',
					width : '100%'
				},
				txtSearchCusNm : {
					id : 'txtSearchCusNm',
					name : 'txtSearchCusNm',
					value : '',
					placeholder : '',
					minLength : 1,
					maxLength : 10,
					readOnly : false,
					disabled : false,
					label : '고객성명',
					width : '100%'
					
				}
			},
			dsSttResultInfo : DataLib.datalist.getInstance(),
			dsSrch: DataLib.datalist.getInstance([{CENT_CD: ComLib.setOrgComboValue("CENT_CD"), TEAM_CD: ComLib.setOrgComboValue("TEAM_CD"), AUTH_LV: "", SRCH_DV: "NM", USR_CD: ComLib.setOrgComboValue("USR_CD")}]),
			// dsGrp: DataLib.datalist.getInstance([{CENT_CD: "", TEAM_CD: ComLib.setOrgComboValue("TEAM_CD"), USR_CD: ""}]), disabled : false,			
		}
		this.event.button.onClick = this.event.button.onClick.bind(this);
		this.event.inputcalendar.onChange = this.event.inputcalendar.onChange.bind(this);
		this.event.input.onChange   = this.event.input.onChange.bind(this);
	}

	/*------------------------------------------------------------------------------------------------*/
		// [2. React Lifecycle Method Zone] ==> 리액트 컴포넌트 생명주기 메소드
		// 참고 site : https://ko.reactjs.org/docs/react-component.html#constructor
	/*------------------------------------------------------------------------------------------------*/
	/*------------------------------------------------------------------------------------------------*
		1) componentDidMount () => init 함수 개념으로 이해하는게 빠름
		=> 컴포넌트가 마운트된 직후, 호출 ->  해당 함수에서 this.setState를 수행할 시, 갱신이 두번 일어나 render()함수가 두번 발생 -> 성능 저하 가능성
	 ------------------------------------------------------------------------------------------------*/
	 componentDidMount () {

		// if (this.validation("STT020000_R01")) this.transaction("STT020000_R01");

	}
	/*------------------------------------------------------------------------------------------------*
		2) componentDidUpdate () => 갱신이 일어나 직후에 호춮 (최초 렌더링 시에는 호출되지 않음)
		=> prevProps와 현재 props를 비교할 수 있음 -> 조건문으로 감싸지 않고 setState를 실행할 시, 무한 반복 가능성 -> 반드시 setState를 쓰려면 조건문으로 작성
	 ------------------------------------------------------------------------------------------------*/
	componentDidUpdate (prevProps, prevState, snapshot) {

	}
	/*------------------------------------------------------------------------------------------------*
		3) componentWillUnmount () => 컴포넌트가 마운트 해제되어 제거되기 직전에 호출
		=> 타이머 제거, 네트워크 요청 취소 등 수행 -> 마운트가 해제되기 때문에 setState를 호출하면 안됨
	 ------------------------------------------------------------------------------------------------*/
	componentWillUnmount () {

	}

	/*------------------------------------------------------------------------------------------------*/
	// [3. validation Event Zone]
	//  - validation 관련 정의
	/*------------------------------------------------------------------------------------------------*/
	validation = (transId) => {

		switch (transId) {
			case 'STT020000_R01' :
				if(StrLib.isNull(this.state.rangeCalendarProps.rgcSearchJob.startDate) || StrLib.isNull(this.state.rangeCalendarProps.rgcSearchJob.endDate) )  {
					ComLib.openDialog('A', 'COME0004', ['시작일자', '종료일자']);
					return false;
				}
				if(this.state.rangeCalendarProps.rgcSearchJob.startDate > this.state.rangeCalendarProps.rgcSearchJob.endDate ) {
					ComLib.openDialog('A', 'SYSI0010', ['검색 시작일자가 종료일자보다 클 수 없습니다.']);
					return false;
				}
				break;
			default :
				break;
		}
		return true;
	}
	/*------------------------------------------------------------------------------------------------*/
	// [4. transaction Event Zone]
	//  - transaction 관련 정의
	/*------------------------------------------------------------------------------------------------*/
	transaction = (transId) => {
		let transManager = new TransManager();
		try {
			switch (transId) {
			case 'STT020000_R01':
				transManager.setTransId(transId);
				transManager.setTransUrl(transManager.constants.url.common);
				transManager.setCallBack(this.callback);
				transManager.addConfig({
					dao: transManager.constants.dao.base,
					crudh: transManager.constants.crudh.read,
					sqlmapid:"STT.R_JobHistory",
					datasetsend:"dsSrchParamInfo",
					datasetrecv:"dsSttResultInfo",
				});
				transManager.addDataset('dsSrchParamInfo', [this.setSearchParam()]);
				transManager.agent();
				break;
			default : break;
			}
		} catch (err) {

		}

	}
	/*------------------------------------------------------------------------------------------------*/
	// [5. Callback Event Zone]
	//  - Callback 관련 정의
	/*------------------------------------------------------------------------------------------------*/
	callback = (res) => {
		switch (res.id) {
		case 'STT020000_R01':
			if(res.data.dsSttResultInfo.length > 0) {
				ComLib.setStateInitRecords(this, "dsSttResultInfo", res.data.dsSttResultInfo);
			} else {
				ComLib.setStateRecords(this, "dsSttResultInfo", "");
			}
			break;
		default : break;
		}
	}


	/*------------------------------------------------------------------------------------------------*/
	// [6. event Zone]
	//  - 각 Component의 event 처리
	/*------------------------------------------------------------------------------------------------*/
	event = {
		// 버튼 이벤트
		button : {
			onClick : (e) => {
				switch (e.target.id) {
				case "btnJobFileSearchList" :
					if(this.validation("STT020000_R01")) {
						this.transaction("STT020000_R01");
					}
					break;
				default : break;
				}
			}
		}, 
		inputcalendar : {
			onChange : (e) => {
				switch (e.target.id) {
				case 'searchJobDateCalender':
					
					this.setState({...this.state, 
							rangeCalendarProps : {...this.state.rangeCalendarProps
													, rgcSearchJob : 
														{...this.state.rangeCalendarProps.rgcSearchJob, startDate : e.startDate, endDate : e.endDate}
												}});
				break; 
				case 'searchCallDateCalender':
					this.setState({...this.state, 
						rangeCalendarProps : {...this.state.rangeCalendarProps
												, rgcSearchCall : 
													{...this.state.rangeCalendarProps.rgcSearchCall, startDate : e.startDate, endDate : e.endDate}
											}});
				break;
				default : break;
				}
			}
		},
		selectbox: {
			onChange: (e) => {
				switch (e.id) {
				case 'selSelfFileStateSearch':
					this.setState({...this.state, 
							selectboxProps : {...this.state.selectboxProps
													, selSelfFileStateSearch : 
														{...this.state.selectboxProps.selSelfFileStateSearch, selected : e.target.selectedIndex, value : e.target.value}
											}});
				break;
				case 'selCenterList':
					this.setState({...this.state, 
						selectboxProps : {...this.state.selectboxProps
												, selCenterList : 
													{...this.state.selectboxProps.selCenterList, selected : e.target.selectedIndex, value : e.target.value}
										}});
					ComLib.setStateValue(this, "dsSrch", 0, "CENT_CD", e.target.value);
					ComLib.setStateValue(this, "dsSrch", 0, "TEAM_CD", "");
				break;
				case 'selTeamList':
					this.setState({...this.state, 
						selectboxProps : {...this.state.selectboxProps
												, selTeamList : 
													{...this.state.selectboxProps.selTeamList, selected : e.target.selectedIndex, value : e.target.value}
										}});
					ComLib.setStateValue(this, "dsSrch", 0, "TEAM_CD", e.target.value);	
				break;
				case 'selUserList':
					this.setState({...this.state, 
						selectboxProps : {...this.state.selectboxProps
												, selUserList : 
													{...this.state.selectboxProps.selUserList, selected : e.target.selectedIndex, value : e.target.value}
										}});
				break;
				case 'selReqUserList':
					this.setState({...this.state, 
						selectboxProps : {...this.state.selectboxProps
												, selReqUserList : 
													{...this.state.selectboxProps.selReqUserList, selected : e.target.selectedIndex, value : e.target.value}
										}});
				break;
				default : break;
				}
			},
		},
		grid: {
			onGridReady : (e) => {
				console.info('console.info grid ongridready');
				console.info(e)
			},
			onCellClicked: (e) => {
					if(e.col === "PLAY_YN") {
						if(e.data.STATE === 'Y') {
							let option = { width: '600px', height: '740px', modaless: true, callId : e.data.CALL_ID,  ctrNo : e.data.CTR_NO}
							ComLib.openPlayer(option);
						}
					}

			},
			//스크롤이 필요한가에 대한 검토 현재는 미적용
			onScrollEnd: (e) => {
				// if (e.page === this.state.gridProps.paging.page) {
					this.setState({...this.state
						, gridProps : { ...this.state.gridProps
							, paging : { ...this.state.gridProps.paging
								, start : this.state.gridProps.paging.start + this.state.gridProps.paging.size
								, page : this.state.gridProps.paging.page + 1
							}
						}
					}, () => {
						this.transaction("SAM010000_R01");
					});
				// }
			},
		},
		input : {
			onChange : (e) => {
				switch (e.target.id) {
					case 'txtSearchCrtNo' :
						this.setState({...this.state
							, textFieldProps : { ...this.state.textFieldProps
								,txtSearchCrtNo : { ...this.state.textFieldProps.txtSearchCrtNo, value : e.target.value }
							}});
						break;
					case 'txtSearchCusNm' :
						this.setState({...this.state
							, textFieldProps : { ...this.state.textFieldProps
								,txtSearchCusNm : { ...this.state.textFieldProps.txtSearchCusNm, value : e.target.value }
							}});
					break;
					default : break;
				}
			},
			onKeyPress: (e) => {
				switch (e.target.id) {
				case 'txtSearchCrtNo':
					if (e.key === 'Enter') {
						if(this.validation("STT020000_R01")) {
							this.transaction("STT020000_R01");
						}
					}
					break;
				case 'txtSearchCusNm' :
					if (e.key === 'Enter') {
						if(this.validation("STT020000_R01")) {
							this.transaction("STT020000_R01")
						}
					}
					break;
				default: break;
				}
			},
		},
	}	

	/**
	 * 화면정의 함수
	 * createShowCellRenderer  상담내용을 상태값에 따라서 재생이 가능한 경우 이미지로 표기
	 * setSearchParam			검색조건을 설정하여 배열로 만들어서 return
	 */	
	createShowCellRenderer () {
		function ShowCellRenderer() {}
		ShowCellRenderer.prototype.init = function (params) {
		  if (params.data.STATE === 'Y') {
			this.ui = document.createElement('div');
			this.ui.innerHTML =
			'<div>' +
			'<i class="xi-message xi-x c-indigo-9"></i>'+
			'</div>' ;
			} else {
			this.ui = document.createElement('div');
			this.ui.innerHTML =
			'<div/>' ;
			}
		}
		ShowCellRenderer.prototype.getGui = function () {
		  return this.ui;
		};
		return ShowCellRenderer;
	}
	setSearchParam = () => {
		let dsSrchParamInfo = {};
		dsSrchParamInfo.JOB_START_DATE = this.state.rangeCalendarProps.rgcSearchJob.startDate;
		dsSrchParamInfo.JOB_END_DATE = this.state.rangeCalendarProps.rgcSearchJob.endDate 
		dsSrchParamInfo.CALL_START_DATE = this.state.rangeCalendarProps.rgcSearchCall.startDate;
		dsSrchParamInfo.CALL_END_DATE = this.state.rangeCalendarProps.rgcSearchCall.endDate
		dsSrchParamInfo.CTR_NO = this.state.textFieldProps.txtSearchCrtNo.value;
		dsSrchParamInfo.STATE = this.state.selectboxProps.selSelfFileStateSearch.value;
		dsSrchParamInfo.CENT_CD = this.state.selectboxProps.selCenterList.value;
		dsSrchParamInfo.TEAM_CD = this.state.selectboxProps.selTeamList.value;
		dsSrchParamInfo.CS_CD = this.state.selectboxProps.selUserList.value;
		dsSrchParamInfo.CUS_NM = this.state.textFieldProps.txtSearchCusNm.value.trim();
		return dsSrchParamInfo;
	}

	render () {
		return (
			<React.Fragment>
				<FullPanel>
					<SearchPanel>
					<Table  
							id="tblSrchUsrMenuInfo" 
							colGrp = {[{width: '6%'}, {width: '21%'}, {width: '5%'}, {width: '16%'},{width: '5%'}, {width: '16%'}, {width: '5%'}, {width: '16%'}, {width: '5%'}, {width: '10%'} ]}
							tbData = {[
								[  	{type : 'D', value : <div style={{marginTop:'-9px'}}><Label value={this.state.rangeCalendarProps.rgcSearchJob.label} req={true}/></div>},
									{type : 'D', value :
									<RangeInputCalendar
										id = {this.state.rangeCalendarProps.rgcSearchJob.id}
										strtId  = {this.state.rangeCalendarProps.rgcSearchJob.strtId}
										endId  = {this.state.rangeCalendarProps.rgcSearchJob.endId}	
										startDate = {this.state.rangeCalendarProps.rgcSearchJob.startDate}
										endDate = {this.state.rangeCalendarProps.rgcSearchJob.endDate}
										onChange = {this.event.inputcalendar.onChange}
									/>},
									{type : 'D', value :<div style={{marginTop:'-9px'}}><Label value={this.state.selectboxProps.selCenterList.label}/></div> },
									{type : 'D', value :
									<Selectbox
										id = {this.state.selectboxProps.selCenterList.id}
										dataset = {this.state.selectboxProps.selCenterList.dataset}
										value = {this.state.dsSrch.records[0]["CENT_CD"]}
										width = {this.state.selectboxProps.selCenterList.width}
										disabled = {this.state.selectboxProps.selCenterList.disabled}
										controlOrgCombo = {'CENT'}
										onChange = {this.event.selectbox.onChange}
									/>},
									{type : 'D', value : <div style={{marginTop:'-9px'}}><Label value={this.state.selectboxProps.selTeamList.label}/></div>},
									{type : 'D', value :
									<Selectbox
									 	id = {this.state.selectboxProps.selTeamList.id}
									 	dataset = {ComLib.convComboList(ComLib.getTeamList(this.state.dsSrch).filter(item => item['TP_CD'] === 'B'), newScrmObj.constants.select.argument.all)}
									 	value = {this.state.dsSrch.records[0]["TEAM_CD"]}
									 	width = {this.state.selectboxProps.selTeamList.width}
										disabled = {this.state.selectboxProps.selTeamList.disabled}
										controlOrgCombo = {'TEAM'}
									 	onChange = {this.event.selectbox.onChange}
									 />},
									 {type : 'D', value :<div style={{marginTop:'-9px'}}><Label value={this.state.selectboxProps.selUserList.label}/></div> },
									 {type : 'D', value :
									 <Selectbox
										 id = {this.state.selectboxProps.selUserList.id}
										 dataset = {ComLib.convComboList(ComLib.getUserList(this.state.dsSrch, true).filter(usr => usr.AUTH_LV === 4), newScrmObj.constants.select.argument.all)}
										 value = {this.state.dsSrch.records[0]["USR_CD"]}
										 width = {this.state.selectboxProps.selUserList.width}
										 disabled = {this.state.selectboxProps.selUserList.disabled}
										 selected = {this.state.selectboxProps.selUserList.selected}
										 controlOrgCombo = {'USER'}
										 onChange= {this.event.selectbox.onChange}
									 />,},
									],
								[
									{type : 'D', value : <div style={{marginTop:'-9px'}}><Label value={this.state.rangeCalendarProps.rgcSearchCall.label}/></div>},
									{type : 'D', value : 
									<RangeInputCalendar
										id = {this.state.rangeCalendarProps.rgcSearchCall.id}
										strtId  = {this.state.rangeCalendarProps.rgcSearchCall.strtId}
										endId  = {this.state.rangeCalendarProps.rgcSearchCall.endId}
										startDate = {this.state.rangeCalendarProps.rgcSearchCall.startDate}
										endDate = {this.state.rangeCalendarProps.rgcSearchCall.endDate}
										onChange = {this.event.inputcalendar.onChange}
									/>},
									{type : 'D', value : <div style={{marginTop:'-9px'}}><Label value={this.state.textFieldProps.txtSearchCusNm.label}/></div> },
									{type : 'D', value :
									
									<Textfield
										width = {this.state.textFieldProps.txtSearchCusNm.width}
										id = {this.state.textFieldProps.txtSearchCusNm.id}
										name =  {this.state.textFieldProps.txtSearchCusNm.name}
										value =  {this.state.textFieldProps.txtSearchCusNm.value}
										placeholder =  {this.state.textFieldProps.txtSearchCusNm.placeholder}
										minLength =   {this.state.textFieldProps.txtSearchCusNm.minLength}
										maxLength =   {this.state.textFieldProps.txtSearchCusNm.maxLength}
										readOnly =  {this.state.textFieldProps.txtSearchCusNm.readOnly}
										disabled =  {this.state.textFieldProps.txtSearchCusNm.disabled}
										onChange = {this.event.input.onChange}
										onKeyPress  = {this.event.input.onKeyPress}
									/>, },
									{type : 'D', value : <div style={{marginTop:'-9px'}}><Label value={this.state.textFieldProps.txtSearchCrtNo.label}/> </div>},
									{type : 'D', value :
									<Textfield
										width = {this.state.textFieldProps.txtSearchCrtNo.width}
										id = {this.state.textFieldProps.txtSearchCrtNo.id}
										// type = "onlyNum"
										name =  {this.state.textFieldProps.txtSearchCrtNo.name}
										value =  {this.state.textFieldProps.txtSearchCrtNo.value}
										placeholder =  {this.state.textFieldProps.txtSearchCrtNo.placeholder}
										minLength =   {this.state.textFieldProps.txtSearchCrtNo.minLength}
										maxLength =   {this.state.textFieldProps.txtSearchCrtNo.maxLength}
										readOnly =  {this.state.textFieldProps.txtSearchCrtNo.readOnly}
										disabled =  {this.state.textFieldProps.txtSearchCrtNo.disabled}
										onChange = {this.event.input.onChange}
										onKeyPress  = {this.event.input.onKeyPress}

									/>, },
									{type : 'D', value :<div style={{marginTop:'-9px'}}><Label value={this.state.selectboxProps.selSelfFileStateSearch.label}/></div>},
									{type : 'D', value :
									<Selectbox
										id       = {this.state.selectboxProps.selSelfFileStateSearch.id}
										dataset  = {this.state.selectboxProps.selSelfFileStateSearch.dataset}
										width    = {this.state.selectboxProps.selSelfFileStateSearch.width}
										disabled = {this.state.selectboxProps.selSelfFileStateSearch.disabled}
										selected = {this.state.selectboxProps.selSelfFileStateSearch.selected}
										onChange = {this.event.selectbox.onChange}
									/>},		
									{type : 'D', value : 
									<RFloatArea>
									<Button 
										id = {this.state.buttonProps.btnSearchProps.id}
										color = 'blue' 
										value = {this.state.buttonProps.btnSearchProps.value}
										disabled = {this.state.buttonProps.btnSearchProps.disabled}
										hidden = {this.state.buttonProps.btnSearchProps.hidden}
										onClick = {this.event.button.onClick}
										icon = {'srch'}
										innerImage={true}
										fiiled = "o"
									/>
									</RFloatArea>
									, colSpan : 2 },
								],
							]}
						/>
					</SearchPanel>
					<ComponentPanel>
						<Grid
							areaName = {this.state.gridSttResultList.areaName}
							id = {this.state.gridSttResultList.id}
							addRowBtn=  {false}
							delRowBtn = {false}
							dnlExcelBtn = {true}
							suppressRowClickSelection = {true}
							height= "600px"
							data = {this.state.dsSttResultInfo}
							header = {this.state.gridSttResultList.header}
							components = {this.state.gridSttResultList.components}
							rowSelection = 'multiple'
							onGridReady = {this.event.grid.onGridReady}
							onCellClicked = {this.event.grid.onCellClicked}
							onScrollEnd = {this.event.grid.onScrollEnd}
							undoRedoCellEditing = {false}
							enableCellChangeFlash = {false}
						/>
					</ComponentPanel>
				</FullPanel>
			</React.Fragment>
		)
	}
}

export default View;