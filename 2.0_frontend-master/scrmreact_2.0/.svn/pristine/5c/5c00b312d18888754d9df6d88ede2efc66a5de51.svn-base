// 코드관리
import React from 'react';
import { ComponentPanel
	   , FlexPanel
	   , FullPanel
	   , SubFullPanel
	   , LFloatArea
	   , RFloatArea
	   , RelativeGroup
	   , SearchPanel
	   , Label
	   , Grid
	   , Textfield 
	   , Selectbox             } from 'components';
import { BasicButton as Button } from 'components';
import { ComLib
	   , DataLib
	   , StrLib
	   , TransManager
	   , newScrmObj            } from 'common';

class View extends React.Component {
	constructor(props) {
		super(props);
		this.bigCdGridApi = null;
		this.smlCdGridApi = null;

		this.maxTempBigCd = 0;
		this.maxTempSmlCd = 0; 

		this.bigCdGrid = null;
		this.smlCdGrid = null;

		this.currentRowBig = '';
		this.currentRowSml = '';
		this.currentRowMdl = ''; 

		this.lastEditedBig = '';
		this.lastEditedMdl = '';

		this.state = {
			dsBigCdList : DataLib.datalist.getInstance(),
			dsSmlCdList : DataLib.datalist.getInstance(),

			btnProps : {
				btnSearch : {
					id       : 'btnSearch',
					disabled : false,
					value    : '조회',
					hidden   : false
				},
				btnBigSave : {
					id       : 'btnBigSave',
					disabled : false,
					value    : '저장',
					hidden   : false
				},
	
				btnSmlSave : {
					id       : 'btnSmlSave',
					disabled : false,
					value    : '저장',
					hidden   : false
				},
			},	
			
			grdProps : {
				grdBigCd : {
					id : 'grdBigCd',
					areaName : '대분류 코드',
					header: [
								{headerName: '대분류코드',	 field: 'BIG_CD',	colId: 'BIG_CD', 	editable: true, width: 170, cellEditor: 'customEditor', maxLength: 30, type:'code', req: true},
								{headerName: '대분류코드명', field: 'BIG_NM',	colId: 'BIG_NM',	editable: true, width: 200, cellEditor: 'customEditor', maxLength: 31, req: true},
								{headerName: '중분류코드',	 field: 'MDL_CD',	colId: 'MDL_CD', 	editable: true, width: 110, cellEditor: 'customEditor', maxLength: 30, type:'code', req: true},
								{headerName: '중분류코드명', field: 'MDL_NM',	colId: 'MDL_NM',	editable: true, width: 110, cellEditor: 'customEditor', maxLength: 31},
								{headerName: '사용여부',	 field: 'USE_YN',	colId: 'USE_YN',	editable: true, defaultValue : 'Y', width: 90, req: true, resizable: false, textAlign: 'center',
									cellEditor: 'agSelectCellEditor',
									cellEditorParams: { values : ComLib.getComCodeValue('USE_YN')},
									valueFormatter : (param) => ComLib.getComCodeName('USE_YN', param.value)}						
							],
					height: '610px'
				},			
				grdSmlCd : {
					id : 'grdSmlCd',
					areaName : '소분류 코드',
					header: [						
								{headerName: '소분류코드',	field: 'SML_CD',	colId: 'SML_CD',	editable: true, width: 110, cellEditor: 'customEditor', maxLength: 30, type:'code', req: true},
								{headerName: '코드명',		field: 'SML_NM',	colId: 'SML_NM',	editable: true, width: 180, cellEditor: 'customEditor', maxLength: 63, req: true},
								{headerName: '코드',		field: 'CD_DV',	    colId: 'CD_DV',	    editable: true, width: 80 , cellEditor: 'customEditor', maxLength: 10, type:'code'},
								{headerName: '정렬순서',	field: 'SORT_NO',	colId: 'SORT_NO',	editable: true, width: 90 , cellEditor: 'customEditor', maxLength: 3, type: 'num', req: true, textAlign: 'center',},
								{headerName: '사용여부',	field: 'USE_YN',	colId: 'USE_YN',	editable: true, defaultValue : 'Y', width: 90 , req: true, resizable: false, textAlign: 'center',
									cellEditor: 'agSelectCellEditor',
									cellEditorParams: { values : ComLib.getComCodeValue('USE_YN')},
									valueFormatter : (param) => ComLib.getComCodeName('USE_YN', param.value)},
							],
					height: '610px'
				},
			},
			selectboxProps : {
				selUseYn : {
					id       : 'selUseYn',
					value    : '',
					dataset  : ComLib.convComboList(ComLib.getCommCodeList("USE_YN"), newScrmObj.constants.select.argument.all),
					width    : 80,
					selected : 0,
					disabled : false
				}
			},			
			textFieldProps : {
				iptBigCdNm : {
					id          : 'iptBigCdNm',
					name        : 'iptBigCdNm',
					value       : '',
					placeholder : '대분류코드/코드명',
					minLength   : 1,
					maxLength   : 12,
					readOnly    : false,
					disabled    : false
				}
			},
		}

		this.event.button.onClick   = this.event.button.onClick.bind(this);
		this.event.input.onChange   = this.event.input.onChange.bind(this);
		
	}
	/*------------------------------------------------------------------------------------------------*
		0) Custom Event Zone 
		rowFinder = 조회후 가장 마지막에 선택되어져 있던 행으로 재 포커싱을 하기 위한 함수
	 ------------------------------------------------------------------------------------------------*/
	rowFinder = (targetRecords, targetColumn, currentRow, secondColumn, secondRow) => {
		let rowNum = 0;

		if (targetRecords === undefined || targetRecords === null) {
			return rowNum;
		}

		if (StrLib.isNull(secondColumn)) {
			if (!StrLib.isNull(currentRow)) {
				for (let i = 0; i < targetRecords.length; i++) {
					if (targetRecords[i][targetColumn] === currentRow) {
						rowNum = i;

						break;
					}
				}
			}
			return rowNum;

		} else {
			if (!StrLib.isNull(secondRow)) {
				for (let i = 0; i < targetRecords.length; i++) {
					if (targetRecords[i][targetColumn] === currentRow && targetRecords[i][secondColumn] === secondRow) {
						rowNum = i;

						break;
					}
				}
			}
			return rowNum;
		}
	}
	/*------------------------------------------------------------------------------------------------*
		1) componentDidMount () => init 함수 개념으로 이해하는게 빠름
		=> 컴포넌트가 마운트된 직후, 호출 ->  해당 함수에서 this.setState를 수행할 시, 갱신이 두번 일어나 render()함수가 두번 발생 -> 성능 저하 가능성
	 ------------------------------------------------------------------------------------------------*/
	componentDidMount () {
		if (this.validation("SYS010000_R01")) this.transaction("SYS010000_R01");
	}
	/*------------------------------------------------------------------------------------------------*
		2) componentDidUpdate () => 갱신이 일어나 직후에 호춮 (최초 렌더링 시에는 호출되지 않음)
		=> prevProps와 현재 props를 비교할 수 있음 -> 조건문으로 감싸지 않고 setState를 실행할 시, 무한 반복 가능성 -> 반드시 setState를 쓰려면 조건문으로 작성
	 ------------------------------------------------------------------------------------------------*/
	componentDidUpdate (prevProps, prevState, snapshot) {
		// console.log("updated!!");
		// console.log(this.state.dsGrp);
	}
	/*------------------------------------------------------------------------------------------------*
		3) componentWillUnmount () => 컴포넌트가 마운트 해제되어 제거되기 직전에 호출
		=> 타이머 제거, 네트워크 요청 취소 등 수행 -> 마운트가 해제되기 때문에 setState를 호출하면 안됨
	 ------------------------------------------------------------------------------------------------*/
	 componentWillUnmount () {

	}

	/*------------------------------------------------------------------------------------------------*/
	// [3. validation Event Zone]
	//  - validation 관련 정의
	// SYS010000_R01 : 대분류 코드 조회
	// SYS010000_R02 : 소분류 코드 조회
	// SYS010000_H01 : 대분류 코드 저장
	// SYS010000_H02 : 소분류 코드 저장
	/*------------------------------------------------------------------------------------------------*/
	validation = (...params) => {
		let transId = params[0];
		let chkCnt  = 0;
		let returnVal = -1;

		switch (transId) {
		case 'SYS010000_R01':

			break;

		case 'SYS010000_R02':	
			
			break;

		case 'SYS010000_H01':	
			let bigRecord = this.bigCdGrid.gridDataset.records;

			outer : for (let intA = 0; intA < bigRecord.length; intA ++) {
				if (bigRecord[intA].rowtype !== newScrmObj.constants.crud.read) {
					chkCnt ++;
				}		
				
				let bigHeader = this.state.grdProps.grdBigCd.header;
				
				for (let i = 0; i < bigHeader.length; i ++) {		
					if (bigHeader[i].req === true) {
						if (StrLib.isNull(bigRecord[intA][bigHeader[i].field])) {
							let bigRows = this.bigCdGridApi.rowModel.rowsToDisplay;
							let bigNum = 0;
							
							for (let i = 0; i < bigRows.length; i ++) {
								if (bigRows[i].data.TEMP_CD === bigRecord[intA].TEMP_CD){									
									bigNum = i;

									break;
								}
							}

							ComLib.openDialog('A', 'COME0001', [Number(bigNum + 1) , bigHeader[i].headerName.replace(/\*/g,'')]);
		
							returnVal = intA;

							break outer;
						}
					}
				}			

				for ( let intB = 0; intB < bigRecord.length; intB ++ ) {
					if (intA !== intB 
						&& bigRecord[intA].BIG_CD === bigRecord[intB].BIG_CD 
						&& bigRecord[intA].MDL_CD === bigRecord[intB].MDL_CD) {
							
						let bigRows = this.bigCdGridApi.rowModel.rowsToDisplay;
						let bigNum = 0;
						
						for (let i = 0; i < bigRows.length; i ++) {
							if (bigRows[i].data.TEMP_CD === bigRecord[intA].TEMP_CD){									
								bigNum = i;

								break;
							}
						}
						
						ComLib.openDialog('A', 'COME0012', [Number(bigNum + 1), Number(intB + 1), '대분류코드와 중분류코드']);
						
						this.bigCdGrid.moveRow(intA, true);
			
						return false;
					}
				}
					
			}

			if (returnVal > -1) {
				this.bigCdGrid.moveRow(returnVal, true);
				
				return false;
			}	

			if (bigRecord.length < 1 || chkCnt === 0) {
				ComLib.openDialog('A', 'COME0005');

				return false;
			}

			break;

		case 'SYS010000_H02':
			let smlRecord = this.smlCdGrid.gridDataset.records;

			outer : for ( let intA = 0; intA < smlRecord.length; intA ++ ) {
				if (smlRecord[intA].rowtype !== newScrmObj.constants.crud.read) {
					chkCnt ++;
				}	

				let smlHeader = this.state.grdProps.grdSmlCd.header;
				
				for (let i = 0; i < smlHeader.length; i ++) {		
					if (smlHeader[i].req === true) {
						if (StrLib.isNull(smlRecord[intA][smlHeader[i].field])) {
							let smlRows = this.smlCdGridApi.rowModel.rowsToDisplay;
							let smlNum = 0;
							
							for (let i = 0; i < smlRows.length; i ++) {
								if (smlRows[i].data.TEMP_CD === smlRecord[intA].TEMP_CD){									
									smlNum = i;

									break;
								}
							}

							ComLib.openDialog('A', 'COME0001', [Number(smlNum + 1) , smlHeader[i].headerName.replace(/\*/g,'')]);
		
							returnVal = intA;

							break outer;
						}
					}
				}

				for ( let intB = 0; intB < smlRecord.length; intB ++ ) {
					if (intA !== intB && smlRecord[intA].SML_CD === smlRecord[intB].SML_CD) {
						let smlRows = this.smlCdGridApi.rowModel.rowsToDisplay;
						let smlNumA = 0;
						let smlNumB = 0;
						for (let i = 0; i < smlRows.length; i ++) {
							if (smlRows[i].data.TEMP_CD === smlRecord[intA].TEMP_CD){									
								smlNumA = i;

							} else if (smlRows[i].data.TEMP_CD === smlRecord[intB].TEMP_CD){									
								smlNumB = i;

							}
						}

						ComLib.openDialog('A', 'COME0012', [Number(smlNumA + 1), Number(smlNumB + 1), '소분류 코드']);
						
						this.smlCdGrid.moveRow(intB, true);
			
						return false;
					}
				}									
			}

			if (returnVal > -1) {
				this.smlCdGrid.moveRow(returnVal, true);
			
				return false;
			}

			if (smlRecord.length < 1 || chkCnt === 0) {
				ComLib.openDialog('A', 'COME0005');

				return false;
			}

			break;

		default: break;
		}

		return true;
	}
	/*------------------------------------------------------------------------------------------------*/
	// [4. transaction Event Zone]
	//  - transaction 관련 정의
	// SYS010000_R01 : 대분류 코드 조회
	// SYS010000_R02 : 소분류 코드 조회
	// SYS010000_H01 : 대분류 코드 저장
	// SYS010000_H02 : 소분류 코드 저장
	/*------------------------------------------------------------------------------------------------*/
	transaction = (...params) => {
		let transId = params[0];

		let transManager = new TransManager();

		transManager.setTransId (transId);
		transManager.setTransUrl(transManager.constants.url.common);
		transManager.setCallBack(this.callback);

		try  {
			switch (transId) {
			case 'SYS010000_R01':
				transManager.addConfig  ({
					dao        : transManager.constants.dao.base,
					crudh      : transManager.constants.crudh.read,
					sqlmapid   : "SYS.R_getBigCdList",
					datasetsend: "dsUser",
					datasetrecv: "dsBigCdRecv"
				});

				transManager.addDataset('dsUser', [{"BIG_CD_NM": this.state.textFieldProps.iptBigCdNm.value.trim(), "USE_YN": this.state.selectboxProps.selUseYn.value}]);
				transManager.agent();

				break;

			case 'SYS010000_R02':
				transManager.addConfig  ({
					dao        : transManager.constants.dao.base,
					crudh      : transManager.constants.crudh.read,
					sqlmapid   : "SYS.R_getSmlCdList",
					datasetsend: "dsUser",
					datasetrecv: "dsSmlCdRecv"
				});

				transManager.addDataset('dsUser', [{"BIG_CD": params[1], "MDL_CD": params[2]}]);
				transManager.agent();

				break

			case 'SYS010000_H01':
				transManager.addConfig  ({
					dao        : transManager.constants.dao.base,
					crudh      : transManager.constants.crudh.handle,
					sqlmapid   : "SYS.H_handleBigCdList",
					datasetsend: "dsBigCdList"
				});

				transManager.addDataset('dsBigCdList', this.bigCdGrid.gridDataset.records);
				transManager.agent();
			
				break;

			case 'SYS010000_H02':
				transManager.addConfig  ({
					dao        : transManager.constants.dao.base,
					crudh      : transManager.constants.crudh.handle,
					sqlmapid   : "SYS.H_handleSmlCdList",
					datasetsend: "dsSmlCdList"
				});

				let smlRecord = this.smlCdGrid.gridDataset.records;

				for (let intA = 0; intA < smlRecord.length; intA ++) {
					if (StrLib.isNull(smlRecord[intA]["BIG_CD"]) || StrLib.isNull(smlRecord[intA]["MDL_CD"])) {
						smlRecord[intA]["BIG_CD"] = this.bigCdGridApi.getSelectedRows()[0].BIG_CD;
						smlRecord[intA]["MDL_CD"] = this.bigCdGridApi.getSelectedRows()[0].MDL_CD;
					}					
				}
				
				transManager.addDataset('dsSmlCdList', smlRecord);
				transManager.agent();
			
				break;					
				
			default: break;
			}
		} catch (err) {

		}
	}
	/*------------------------------------------------------------------------------------------------*/
	// [5. Callback Event Zone]
	//  - Callback 관련 정의
	// SYS010000_R01 : 대분류 코드 조회
	// SYS010000_R02 : 소분류 코드 조회
	// SYS010000_H01 : 대분류 코드 저장
	// SYS010000_H02 : 소분류 코드 저장
	/*------------------------------------------------------------------------------------------------*/
	callback = (res) => {	
		let bigRows, smlRows;
		let bigRow, smlRow;		

		switch (res.id) {
		case 'SYS010000_R01':
			if (res.data.dsBigCdRecv.length > 0) {
				let dsBigCd = res.data.dsBigCdRecv;
				let tempBigCd = 0;

				for (let i = 0; i < dsBigCd.length; i ++) {
					dsBigCd[i].TEMP_CD = tempBigCd;
					tempBigCd ++;
				}

				this.maxTempBigCd = tempBigCd;

				ComLib.setStateInitRecords(this, "dsBigCdList", dsBigCd);

				bigRows = this.bigCdGridApi.rowModel.rowsToDisplay;
				
				let bigCd;
				let mdlCd;

				for (let i = 0; i < bigRows.length; i ++) {
					if (bigRows[i].data.BIG_CD ===  this.lastEditedBig && bigRows[i].data.MDL_CD === this.lastEditedMdl){
						bigRow = this.bigCdGridApi.rowModel.rowsToDisplay[i];
						bigCd  = this.bigCdGridApi.rowModel.rowsToDisplay[i].data.BIG_CD;
						mdlCd  = this.bigCdGridApi.rowModel.rowsToDisplay[i].data.MDL_CD;
						
						this.bigCdGridApi.ensureIndexVisible(i, 'middle');

						break;
					}
				}
				if (bigRow === undefined) {
					bigRow = this.bigCdGridApi.rowModel.rowsToDisplay[0];					
					bigCd  = this.bigCdGridApi.rowModel.rowsToDisplay[0].data.BIG_CD;
					mdlCd  = this.bigCdGridApi.rowModel.rowsToDisplay[0].data.MDL_CD;
				}

				if (bigRow !== undefined && bigRow.selected !== true) {
					bigRow.setSelected(true);
				}

				this.currentRowBig = bigCd;
				this.currentRowMdl = mdlCd;

				if (this.validation("SYS010000_R02")) this.transaction("SYS010000_R02", bigCd, mdlCd);

			} else {
				ComLib.setStateInitRecords(this, "dsBigCdList", []);
				ComLib.setStateInitRecords(this, "dsSmlCdList", []);

			}
			
			break;

		case 'SYS010000_R02':	
			let dsSmlCd = res.data.dsSmlCdRecv;
			let tempSmlCd = 0;

			for (let i = 0; i < dsSmlCd.length; i ++) {
				dsSmlCd[i].TEMP_CD = tempSmlCd;
				tempSmlCd ++;
			}

			this.maxTempSmlCd = tempSmlCd;


			ComLib.setStateInitRecords(this, "dsSmlCdList", res.data.dsSmlCdRecv);

			smlRows = this.smlCdGridApi.rowModel.rowsToDisplay;

			for (let i = 0; i < smlRows.length; i ++) {
				if (smlRows[i].data.TEMP_CD === this.currentRowSml){
					smlRow = this.smlCdGridApi.rowModel.rowsToDisplay[i];
					this.smlCdGridApi.ensureIndexVisible(i, 'middle');						
					break;
				}
			}

			if (smlRow === undefined) {
				smlRow = this.smlCdGridApi.rowModel.rowsToDisplay[0];
			}

			if (smlRow !== undefined && smlRow.selected !== true) {
				smlRow.setSelected(true);
			}
			
			break;

		case 'SYS010000_H01':
			ComLib.openDialog("A", "COMI0001", ["대분류 코드"]);
			
			this.transaction("SYS010000_R01");
			
			break;

		case 'SYS010000_H02':
			ComLib.openDialog("A", "COMI0001", ["소분류 코드"]);
			
			let bigCd = this.bigCdGrid.getSelectedRows()[0].BIG_CD;
			let mdlCd = this.bigCdGrid.getSelectedRows()[0].MDL_CD;

			this.transaction("SYS010000_R02", bigCd, mdlCd);

			break;

		default : break;
		}
	}
	/*------------------------------------------------------------------------------------------------*/
	// [6. event Zone]
	//  - 각 Component의 event 처리
	/*------------------------------------------------------------------------------------------------*/
	event = {
		// 버튼 이벤트
		button : {
			onClick : (e) => {
				switch (e.target.id) {
				case "btnSearch":
					if (this.validation("SYS010000_R01")) this.transaction("SYS010000_R01");
				
					break;

				case "btnBigSave":
					if (this.validation("SYS010000_H01")) this.transaction("SYS010000_H01");

					break;

				case "btnSmlSave":
					if (this.validation("SYS010000_H02")) this.transaction("SYS010000_H02");
					
					break;	
						
				default : break;
				}
			}
		},
		grid: {
			onSelectionChanged: (e) => {
				switch (e.id) {
				case "grdBigCd":
					let bigRow = this.bigCdGrid.getSelectedRows()[0]	

					let bigCd   = bigRow.BIG_CD;
					let rowType = bigRow.rowtype;
					let mdlCd   = bigRow.MDL_CD;					

					if ((rowType === 'r' || rowType === 'u') && (this.currentRowBig !== bigCd || this.currentRowMdl !== mdlCd)) {
						if (this.validation("SYS010000_R02")) this.transaction("SYS010000_R02", bigCd, mdlCd);
						

					} else if (rowType === 'c'){
						ComLib.setStateInitRecords(this, "dsSmlCdList", []);

					}

					this.currentRowBig = this.bigCdGridApi.getSelectedRows()[0].BIG_CD;
					this.currentRowMdl = this.bigCdGridApi.getSelectedRows()[0].MDL_CD;
						
					break;

				case "grdSmlCd":

					break;

				default: break
				}
			},
			onGridReady: (e) => {
				switch (e.id) {
				case "grdBigCd":
					this.bigCdGridApi = e.gridApi;
					this.bigCdGrid    = e.grid;
					
					break;

				case "grdSmlCd":
					this.smlCdGridApi = e.gridApi;
					this.smlCdGrid    = e.grid;
					
					break;

				default: break
				}
			},
			onRowClicked: (e) => {
				switch (e.id) {
				case "grdBigCd":
					let bigRows = this.bigCdGridApi.rowModel.rowsToDisplay;
					let bigRow;

					for (let i = 0; i < bigRows.length; i ++) {
						if (bigRows[i].data.TEMP_CD === e.data.TEMP_CD){
							bigRow = this.bigCdGridApi.rowModel.rowsToDisplay[i];
							break;
						}
					}

					if (bigRow.selected !== true) {
						bigRow.setSelected(true);
					}
															 		
					break;

				case "grdSmlCd":
					let smlRows = this.smlCdGridApi.rowModel.rowsToDisplay;
					let smlRow;

					for (let i = 0; i < smlRows.length; i ++) {
						if (smlRows[i].data.TEMP_CD === e.data.TEMP_CD){
							smlRow = this.smlCdGridApi.rowModel.rowsToDisplay[i];
							break;
						}
					}


					if (smlRow.selected !== true) {
						smlRow.setSelected(true);
					}

					break;

				default: break;
				}
			},
			onCellValueChanged: (e) => {				
				switch (e.id) {
				case "grdBigCd":	
					if (e.col === "BIG_CD" || e.col === "MDL_CD" ) {
						if (this.bigCdGrid.gridDataset.records[e.index].rowtype !== newScrmObj.constants.crud.create) {
							ComLib.openDialog('A', 'COME0013', [(e.col === "BIG_CD" ? '대' : '중') + '분류 코드']);
						
							this.bigCdGrid.gridDataset.setValue(e.index , e.col, e.oldValue);
							this.bigCdGridApi.setRowData(this.bigCdGrid.gridDataset.getRecords().filter(item => item['rowtype'] !== newScrmObj.constants.crud.destroy));
						}
					}	

					let bigRows = this.bigCdGridApi.rowModel.rowsToDisplay;
					let bigRow;

					for (let i = 0; i < bigRows.length; i ++) {
						if (bigRows[i].data.TEMP_CD === e.data[e.index].TEMP_CD){
							bigRow = this.bigCdGridApi.rowModel.rowsToDisplay[i];							
							break;
						}
					}

					this.currentRowBig = bigRow.data.BIG_CD;
					this.currentRowMdl = bigRow.data.MDL_CD;

					this.lastEditedBig = bigRow.data.BIG_CD;
					this.lastEditedMdl = bigRow.data.MDL_CD;

					break;

				case "grdSmlCd" :		
					if (e.col === "SML_CD") {
						if (this.smlCdGrid.gridDataset.records[e.index].rowtype !== newScrmObj.constants.crud.create) {
							ComLib.openDialog('A', 'COME0013', ['소분류 코드']);
						
							this.smlCdGrid.gridDataset.setValue(e.index , e.col, e.oldValue);
							this.smlCdGridApi.setRowData(this.smlCdGrid.gridDataset.getRecords().filter(item => item['rowtype'] !== newScrmObj.constants.crud.destroy));
						}
					}	
					
					let smlRows = this.bigCdGridApi.rowModel.rowsToDisplay;
					let smlRow;

					for (let i = 0; i < smlRows.length; i ++) {
						if (smlRows[i].data.TEMP_CD === e.data[e.index].TEMP_CD){
							smlRow = this.smlCdGridApi.rowModel.rowsToDisplay[i];
							this.smlCdGridApi.ensureIndexVisible(i, 'middle');						
							break;
						}
					}
									
					this.currentRowBig = this.bigCdGridApi.getSelectedRows()[0].BIG_CD;
					this.currentRowMdl = this.bigCdGridApi.getSelectedRows()[0].MDL_CD;
					this.currentRowSml = smlRow !== undefined ? smlRow.data.SML_CD : '';
					
					this.lastEditedBig = this.currentRowBig;
					this.lastEditedMdl = this.currentRowMdl;

					break;
		
				default: break;
				}
			},
			onDeleteRow: (e) => {
				switch (e.id) {
				case "grdBigCd":
					let bigCd   = this.bigCdGridApi.getSelectedRows()[0].BIG_CD
					let mdlCd   = this.bigCdGridApi.getSelectedRows()[0].MDL_CD
					let rowType = this.bigCdGridApi.getSelectedRows()[0].rowtype;					

					if ((rowType === 'r' || rowType === 'u') && (this.currentRowBig !== bigCd || this.currentRowMdl !== mdlCd)) {
						if (this.validation("SYS010000_R02")) this.transaction("SYS010000_R02", bigCd, mdlCd);
							
					} else {
						ComLib.setStateInitRecords(this, "dsSmlCdList", []);

					}
					
					this.currentRowBig = this.bigCdGridApi.getSelectedRows()[0].BIG_CD;
					this.currentRowMdl = this.bigCdGridApi.getSelectedRows()[0].MDL_CD;

					break;

				case "grdSmlCd":
					if (this.smlCdGridApi.getSelectedRows().length > 0) {
						this.currentRowSml = this.smlCdGridApi.getSelectedRows()[0].SML_CD;

					} else {
						this.currentRowSml = '';

					}
					
					break;
		
				default: break;
				}
			},
			onBeforeInsertRow : (e) => {
				switch (e.id) {
				case "grdBigCd":
					
					break;

				case "grdSmlCd":
					if (this.bigCdGridApi.getSelectedRows().length < 1) {	
						ComLib.openDialog('A', 'COME0006', ['대분류 코드', '선택']);	
						
						return {rtn: false};

					} else if (this.bigCdGridApi.getSelectedRows()[0].rowtype !== 'r') {
						ComLib.openDialog('A', 'COME0006', ['대분류 코드', '저장']);

						return {rtn: false};
					} 

					break;
		
				default: break;
				}

				return {rtn: true, index: 0};
			},			
			onInsertRow : (e) => {
				switch (e.id) {
				case "grdBigCd":
					let bigCdRecords = this.bigCdGrid.gridDataset.records;

					bigCdRecords[e.index].TEMP_CD = this.maxTempBigCd + 1;

					this.maxTempBigCd ++;

					this.bigCdGrid.gridDataset.setRecords(bigCdRecords);

					this.bigCdGridApi.setRowData(this.bigCdGrid.gridDataset.getRecords().filter(item => item['rowtype'] !== newScrmObj.constants.crud.destroy));
				
					let bigRows = this.bigCdGridApi.rowModel.rowsToDisplay;
					let bigRow;

					for (let i = 0; i < bigRows.length; i ++) {
						if (bigRows[i].data.TEMP_CD === this.maxTempBigCd){
							bigRow = this.bigCdGridApi.rowModel.rowsToDisplay[i];
							this.bigCdGridApi.ensureIndexVisible(i, 'middle');
							break;
						}
					}

					if (bigRow.selected !== true) {
						bigRow.setSelected(true);
					}					

					ComLib.setStateInitRecords(this, "dsSmlCdList", []);
					
					this.currentRowBig = '';
					this.currentRowMdl = '';

					break;

				case "grdSmlCd":				

					break;
		
				default: break;
				}
				
			}
		},
		input : {
			onChange: (e) => {
				switch (e.target.id) {
				case 'iptBigCdNm':
					let state = this.state;

					state['textFieldProps']['iptBigCdNm'].value = e.target.value;
	
					this.setState(state);
					
					break;

				default: break;
				}
			},
			onKeyPress: (e) => {
				switch (e.target.id) {
				case 'iptBigCdNm':
					if (e.key === 'Enter') {
						if (this.validation("SYS010000_R01")) this.transaction("SYS010000_R01");
					}
					
					break;

				default: break;
				}

			}
		},
		selectbox: {
			onChange: (e) => {
				let state = this.state;

				state['selectboxProps'][e.target.id].selected = e.target.selectedIndex;
				state['selectboxProps'][e.target.id].value    = e.target.value;

				this.setState(state);

			}
		}
	}
	/*------------------------------------------------------------------------------------------------*/
	// [7. render Zone]
	//  - 화면 관련 내용 작성
	/*------------------------------------------------------------------------------------------------*/
	render () {
		return (
			<React.Fragment>
				<FullPanel>
					<SearchPanel>
						<RelativeGroup>
							<LFloatArea>
								<FlexPanel>
									<Label value="대분류코드/코드명"/>
									<Textfield
										width       = {300}
										id          = {this.state.textFieldProps.iptBigCdNm.id}
										name        = {this.state.textFieldProps.iptBigCdNm.name}
										value       = {this.state.textFieldProps.iptBigCdNm.value}
										placeholder = {this.state.textFieldProps.iptBigCdNm.placeholder}
										minLength   = {this.state.textFieldProps.iptBigCdNm.minLength}
										maxLength   = {this.state.textFieldProps.iptBigCdNm.maxLength}
										readOnly    = {this.state.textFieldProps.iptBigCdNm.readOnly}
										disabled    = {this.state.textFieldProps.iptBigCdNm.disabled}
										onChange    = {this.event.input.onChange}
										onKeyPress  = {this.event.input.onKeyPress}
									/>
									<Label value="대분류코드 사용여부"/>
									<Selectbox
										id       = {this.state.selectboxProps.selUseYn.id}
										value    = {this.state.selectboxProps.selUseYn.value}
										dataset  = {this.state.selectboxProps.selUseYn.dataset}
										width    = {this.state.selectboxProps.selUseYn.width}
										disabled = {this.state.selectboxProps.selUseYn.disabled}
										selected = {this.state.selectboxProps.selUseYn.selected}
										onChange = {this.event.selectbox.onChange}
									/>
								</FlexPanel>
							</LFloatArea>
							<RFloatArea>
								<Button
									color      = 'blue' 
									fiiled	   = "o"
									innerImage = {true} 
									icon	   = {'srch'}  
									id         = {this.state.btnProps.btnSearch.id}
									value      = {this.state.btnProps.btnSearch.value}
									disabled   = {this.state.btnProps.btnSearch.disabled}
									hidden     = {this.state.btnProps.btnSearch.hidden}
									onClick    = {this.event.button.onClick}
									mt         = {5}
								/>
							</RFloatArea>
						</RelativeGroup>
					</SearchPanel>						
					<SubFullPanel>
						<FlexPanel>
							<ComponentPanel>
								<Grid
									id       = {this.state.grdProps.grdBigCd.id} 
									areaName = {this.state.grdProps.grdBigCd.areaName}
									header   = {this.state.grdProps.grdBigCd.header}
									data     = {this.state.dsBigCdList}
									height   = {this.state.grdProps.grdBigCd.height}
									rowNum   = {true}

									onGridReady        = {this.event.grid.onGridReady}
									onRowClicked       = {this.event.grid.onRowClicked}
									onCellValueChanged = {this.event.grid.onCellValueChanged}
									onDeleteRow        = {this.event.grid.onDeleteRow}
									onInsertRow        = {this.event.grid.onInsertRow}
									onSelectionChanged = {this.event.grid.onSelectionChanged}
								/>
								<RelativeGroup>
									<RFloatArea>	
										<Button
											color    = 'purple' 
											fiiled   = "o" 
											id       = {this.state.btnProps.btnBigSave.id}
											value    = {this.state.btnProps.btnBigSave.value}
											disabled = {this.state.btnProps.btnBigSave.disabled}
											hidden   = {this.state.btnProps.btnBigSave.hidden}
											onClick  = {this.event.button.onClick}
											mt       = {5}
										/>
									</RFloatArea>
								</RelativeGroup>
							</ComponentPanel>
							<ComponentPanel width={'85%'}>
								<Grid
									id       = {this.state.grdProps.grdSmlCd.id} 
									areaName = {this.state.grdProps.grdSmlCd.areaName}
									header   = {this.state.grdProps.grdSmlCd.header}
									data     = {this.state.dsSmlCdList}
									height   = {this.state.grdProps.grdSmlCd.height}
									rowNum   = {true}

									onGridReady        = {this.event.grid.onGridReady}
									onRowClicked       = {this.event.grid.onRowClicked}
									onCellValueChanged = {this.event.grid.onCellValueChanged}
									onDeleteRow        = {this.event.grid.onDeleteRow}
									onInsertRow        = {this.event.grid.onInsertRow}
									onBeforeInsertRow  = {this.event.grid.onBeforeInsertRow}
									onSelectionChanged = {this.event.grid.onSelectionChanged}							
								/>
								<RelativeGroup>
									<RFloatArea>
										<Button
											color    = 'purple' 
											fiiled   = "o" 
											id       = {this.state.btnProps.btnSmlSave.id}
											value    = {this.state.btnProps.btnSmlSave.value}
											disabled = {this.state.btnProps.btnSmlSave.disabled}
											hidden   = {this.state.btnProps.btnSmlSave.hidden}
											onClick  = {this.event.button.onClick}
											mt       = {5}
										/>
									</RFloatArea>
								</RelativeGroup>
							</ComponentPanel>
						</FlexPanel>
					</SubFullPanel>
				</FullPanel>
			</React.Fragment>
		)
	}
}
export default View;