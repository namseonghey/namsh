import React from 'react';
// 레이아웃 컴포넌트
import {    AppPanel, HeadPanel, MiddlePanel, SidePanel, MainPanel, ComponentPanel, FooterPanel,
			FlexPanel, FullPanel, SubFullPanel, LFloatArea, RFloatArea, RelativeGroup} from 'components';
//버튼 컴포넌트
import {BasicButton as Button} from 'components';
import {MultiCheckBox, Checkbox, Radio, Textfield,Textarea, InputCalendar, MultiSelectbox, TextPasswdfield, RangeInputCalendar, Selectbox, MulitSelectBox, Tree} from 'components';
import {ScrmRadialBarChart} from 'components';
import {ComLib, DataLib, newScrmObj} from 'common';

class View extends React.Component{
	/*------------------------------------------------------------------------------------------------*/
	// [1. Default State Zone]
	/*------------------------------------------------------------------------------------------------*/
	// state 초기화 및 이벤트 바인딩할 때 사용
	constructor(props) {
		super(props);
		this.state = {
			dsGrp: DataLib.datalist.getInstance([{CENT_CD: "", TEAM_CD: "", USR_CD: ""}]),
			buttonProps : {
				id : 'btnTest',
				disabled : false,
				value : 'TEST Button',
				hidden : false
			},
			textFieldProps : {
				string : {
					id : 'iptStringTest',
					name : 'iptStringTest',
					value : '',
					placeholder : 'String....',
					minLength : 5,
					maxLength : 20,
					readOnly : false,
					disabled : false
				},
				number : {
					id : 'iptNumberTest',
					name : 'iptNumberTest',
					value : '',
					placeholder : 'Number....',
					minLength : 5,
					maxLength : 20,
					readOnly : false,
					disabled : true
				}
			},
			radioProps : {
				id : 'rdoTest',
				dataset : [
					{ key : 'rHtml',         txt : 'HTML'},
					{ key : 'rCss',          txt : 'CSS'},
					{ key : 'rJavascript',   txt : 'Javascript'}
				],
				keyProp : 'key',
				value : 'txt',
				readOnly : false,
				disabled : false,
				selected : 'rCss'
			},
			singleCheckProp : {
				id : 'singleChkTest',
				index : 0,
				keyProp : 'scVsCode',
				value : 'VsCode',
				checked : 'Y',
				readOnly : false,
				disabled : false
			},
			multiCheckProps : {
				id : 'multiChkTest',
				dataset : [
					{ key : 'cReact',   txt : 'React',      value : 'Y'} ,
					{ key : 'cVue',     txt : 'Vue',        value : 'N'} ,
					{ key : 'cAngular', txt : 'Angular',    value : 'N'}
				],
				keyProp : 'key',
				value : 'txt',
				readOnly : false,
				disabled : false,
			},
			calendarProps : {
				id : 'iptCalTest',
				value : '20200831',
				closeCalendar : true,
				disabled : false,
				disableCalendar : false,
				format : 'y-MM-dd',
				isOpen : false,
				maxDate : null,
				minDate : null,
				required : false,
				returnValue : 'start'
			},
			rangeCalendarProps : {
				id : 'iptRangeCalTest',
				strtId : 'iptRangeCalTestStrt',
				endId : 'iptRangeCalTestEnd',
				startDate : '20201116',
				endDate : '20201118',
				focusedInput : null
			},
			chartProps : {

			},
			popupProps : {
				alert : {
					id : 'btnTestAlert',
					value : 'Alert Test'
				},
				confirm : {
					id : 'btnTestConfirm',
					value : 'Confirm Test'
				},
				modal : {
					id : 'btnTestModal',
					value : 'Modal Test'
				},
				modaless : {
					id : 'btnTestModaless',
					value : 'Modaless Test'
				}
			},
			selectboxProps : {
				id : 'selTest',
				dataset : [
					{value : 'opt1', name : '옵션1'},
					{value : 'opt2', name : '옵션2'},
					{value : 'opt3', name : '옵션3'},
					{value : 'opt4', name : '옵션4'},
					{value : 'opt5', name : '옵션5'},
					{value : 'opt6', name : '옵션6'},
					{value : 'opt7', name : '옵션7'},
					{value : 'opt8', name : '옵션8'},
				],
				width : 200,
				selected : 1,
				disabled : false
			},
			multiSelectboxProps : {
				id : 'mulSelTest',
				width : 200,
				disabled : false,
				dataset : [
					{ key : 'cReact',   txt : 'React',      value : 'Y'},
					{ key : 'cVue',     txt : 'Vue',        value : 'N'},
					{ key : 'cAngular', txt : 'Angular',    value : 'N'},
					{ key : 'cAngular', txt : 'Angular',    value : 'N'},
					{ key : 'cAngular', txt : 'Angular',    value : 'N'},
					{ key : 'cAngular', txt : 'Angular',    value : 'N'},
					{ key : 'cAngular', txt : 'Angular',    value : 'N'}
				],
				keyProp : 'key',
				value : 'txt',
				displayCount : 5
			},
			treeProps : {
				id : 'tstTree',
				disabled : false,
				depth : 3,
				dataset : [
					{id : 'depth1', parn_id : 'none', value : 'depth1'},
					{id : 'depth1-1', parn_id : 'depth1', value : 'depth1-1'},
					{id : 'depth1-2', parn_id : 'depth1', value : 'depth1-2'},
					{id : 'depth1-3', parn_id : 'depth1', value : 'depth1-3'},
					{id : 'depth1-1-1', parn_id : 'depth1-1', value: 'depth1-1-1'},
					{id : 'depth1-1-2', parn_id : 'depth1-1', value: 'depth1-1-2'},
					{id : 'depth2', parn_id : 'none', value : 'depth2'},
					{id : 'depth2-1', parn_id : 'depth2', value : 'depth2-1'},
					{id : 'depth2-2', parn_id : 'depth2', value : 'depth2-2'},
					{id : 'depth2-3', parn_id : 'depth2', value : 'depth2-3'},
					{id : 'depth2-2-1', parn_id : 'depth2-2', value: 'depth2-2-1'},
					{id : 'depth2-2-2', parn_id : 'depth2-2', value: 'depth2-2-2'},
					{id : 'depth3', parn_id : 'none', value : 'depth3'},
					{id : 'depth3-1', parn_id : 'depth3', value : 'depth3-1'},
					{id : 'depth3-2', parn_id : 'depth3', value : 'depth3-2'},
					{id : 'depth3-2-1', parn_id : 'depth3-2', value: 'depth3-2-1'},
					{id : 'depth3-2-2', parn_id : 'depth3-2', value: 'depth3-2-2'},
				]
			}
		}
		// 이벤트 바인딩
		this.event.button.onClick = this.event.button.onClick.bind(this);
		this.event.input.onChange = this.event.input.onChange.bind(this);
		this.event.radio.onChange = this.event.radio.onChange.bind(this);
		this.event.checkbox.onChange = this.event.checkbox.onChange.bind(this);
		this.event.selectbox.onChange = this.event.selectbox.onChange.bind(this);
		this.event.inputcalendar.onChange = this.event.inputcalendar.onChange.bind(this);
	}
	/*------------------------------------------------------------------------------------------------*/
		// [2. React Lifecycle Method Zone] ==> 리액트 컴포넌트 생명주기 메소드
		// 참고 site : https://ko.reactjs.org/docs/react-component.html#constructor
	/*------------------------------------------------------------------------------------------------*/
	/*------------------------------------------------------------------------------------------------*
		1) componentDidMount () => init 함수 개념으로 이해하는게 빠름
		=> 컴포넌트가 마운트된 직후, 호출 ->  해당 함수에서 this.setState를 수행할 시, 갱신이 두번 일어나 render()함수가 두번 발생 -> 성능 저하 가능성
	 ------------------------------------------------------------------------------------------------*/
	componentDidMount () {

	}
	/*------------------------------------------------------------------------------------------------*
		2) componentDidUpdate () => 갱신이 일어나 직후에 호춮 (최초 렌더링 시에는 호출되지 않음)
		=> prevProps와 현재 props를 비교할 수 있음 -> 조건문으로 감싸지 않고 setState를 실행할 시, 무한 반복 가능성 -> 반드시 setState를 쓰려면 조건문으로 작성
	 ------------------------------------------------------------------------------------------------*/
	componentDidUpdate (prevProps, prevState, snapshot) {
		console.log("updated!!");
		console.log(this.state.dsGrp);
	}
	/*------------------------------------------------------------------------------------------------*
		3) componentWillUnmount () => 컴포넌트가 마운트 해제되어 제거되기 직전에 호출
		=> 타이머 제거, 네트워크 요청 취소 등 수행 -> 마운트가 해제되기 때문에 setState를 호출하면 안됨
	 ------------------------------------------------------------------------------------------------*/
	componentWillUnmount () {

	}

	/*------------------------------------------------------------------------------------------------*/
	// [3. validation Event Zone]
	//  - validation 관련 정의
	/*------------------------------------------------------------------------------------------------*/
	validation = (transId) => {
		console.log('validtion');
		switch (transId) {
			case 'SAM010000_R01' :
				break;
			default :
				break;
		}

	}
	/*------------------------------------------------------------------------------------------------*/
	// [4. transaction Event Zone]
	//  - transaction 관련 정의
	/*------------------------------------------------------------------------------------------------*/
	transaction = (transId) => {
		console.log('transaction');
		try  {
			console.log(transId);
		} catch (err) {

		}
	}
	/*------------------------------------------------------------------------------------------------*/
	// [5. Callback Event Zone]
	//  - Callback 관련 정의
	/*------------------------------------------------------------------------------------------------*/
	callback = (res) => {
		console.log('callback');
	}
	/*------------------------------------------------------------------------------------------------*/
	// [6. event Zone]
	//  - 각 Component의 event 처리
	/*------------------------------------------------------------------------------------------------*/
	event = {
		// 버튼 이벤트
		button : {
			onClick : (e) => {
				switch (e.target.id) {
					case "btnTest" :
						alert(e.target.id);
						break;
					case "btnDisabled" :
						this.setState({...this.state, buttonProps : { ...this.state.buttonProps, disabled : !this.state.buttonProps.disabled }});
						break;
					case "btnControlInputText" :
						break;
					case "btnTestAlert" :

						ComLib.openDialog('A', 'SYSI0010', ['Alert test 입니다.\n 하지만 너무나 짧으면 테스트가 안되는\n 것이므로 길게 블라블라블라 어쩌고저쩌고.']);
						break;
					case "btnTestConfirm" :
						ComLib.openDialog('C', 'SYSI0010', ['Confirm 테스트입니다.\n 가나다라마바사아자차카타팧'], foo => { 
							if (foo === true) return;
							else alert(foo)
						 });
						break;
					case "btnTestModal" :
						e.target.blur();
						let option1 = { width: '500px', height: '400px', modaless: false, callback : () => {alert('callback 먼저');} }
						ComLib.openPop('pwdInit', '비밀번호 초기화', option1);
						break;
					case "btnTestModaless" :
						let option2 = { width: '800px', height: '600px',  modaless: true,}
						ComLib.openPop('pwdInit', '비밀번호 초기화', option2);
						break;
						default : break;
				}
			}
		},
		input : {
			onChange : (e) => {
				switch (e.target.id) {
					case 'iptStringTest' :
						this.setState({...this.state, textFieldProps : { ...this.state.textFieldProps, string : {...this.state.textFieldProps.string, value : e.target.value }}});
						break;
					case 'iptNumberTest' :
						this.setState({...this.state, textFieldProps : { ...this.state.textFieldProps, number : {...this.state.textFieldProps.number, value : e.target.value }}});
						break;
					default : break;
				}
			}
		},
		radio : {
			onChange : (e) => {
				switch (e.id) {
					case 'rdoTest' :
						//alert(e.value);
						console.log('e.value',e.value);
						this.setState({...this.state, radioProps : {...this.state.radioProps, selected : e.value}});
						console.log('selected',this.state.radioProps.selected);
						break;
					default : break;
				}
			}
		},
		checkbox : {
			onChange : (e) => {
				switch (e.id) {
					case 'singleChkTest' :
						console.log(e);
						this.setState({...this.state, singleCheckProp: {...this.state.singleCheckProp, checked : (e.checked) ? 'Y' : 'N'}});
						break;
					case 'multiChkTest' :
						let data = this.state.multiCheckProps.dataset;
						data = data.map((item, index) => {
							if (index === e.index) {
								if (e.checked === true) {
									item['value'] = 'Y';
								} else {
									item['value'] = 'N';
								}
							}
							return item;
						});

						this.setState({
							...this.state
							, multiCheckProps : {
								...this.state.multiCheckProps
								, dataset : data
							}
						});
						break;
					default : break;
				}
			}
		},
		inputcalendar : {
			onCalendarClose : (e) => {
				switch (e.target.id) {
					case 'iptCalTest' :
						break;
					default : break;
				}
			},
			onCalendarOpen : (e) => {
				switch (e.target.id) {
					case 'iptCalTest' :
						break;
					default : break;
				}
			},
			onChange : (e) => {
				switch (e.target.id) {
					case 'iptCalTest' :
						this.setState({...this.state, calendarProps : {...this.state.calendarProps, value : e.target.value}});
						break;
					case 'iptRangeCalTest' :
						console.log('onChange');
						console.log('iptRangeCalTest');
						console.log(e);
						this.setState({...this.state, rangeCalendarProps : {...this.state.rangeCalendarProps, startDate : e.startDate, endDate : e.endDate}});
						break;
		
					default : break;
				}
			},
			onFocusChange : (e) => {
				switch (e.target.id) {
				case 'iptRangeCalTest' :
					this.setState({...this.state, rangeCalendarProps : {...this.state.rangeCalendarProps, focusedInput : e.focusedInput}});
					break;
				default : break;
				}
			}
		},
		selectbox: {
			onChange: (e) => {
				switch (e.id) {
					case 'selTest' :
						console.log('selTest onChange');
						console.log(e);
						console.log(e.target.selectedIndex);
						this.setState({...this.state, selectboxProps : {...this.state.selectboxProps, selected : e.target.selectedIndex, value : e.target.value}});
						break;
					case 'mulSelTest' :
						console.log('mulSelTest');
						console.log(e);
						this.setState({...this.state, multiSelectboxProps : {...this.state.multiSelectboxProps, dataset : e.dataset}});
						break;
					case 'cmbCent':
						console.log(e);
						console.log(e.target.value);
						this.state.dsGrp.setValue(0, "CENT_CD", e.target.value);
						this.state.dsGrp.setValue(0, "TEAM_CD", "");
						ComLib.setStateDs(this, "dsGrp");
						console.log(this.state.dsGrp);
						break;
					case 'cmbTeam':
						console.log(e.target.value);
						ComLib.setStateValue(this, "dsGrp", 0, "TEAM_CD", e.target.value);
						break;
					case 'cmbUser':
						console.log(e.target.value);
						ComLib.setStateValue(this, "dsGrp", 0, "USR_CD", e.target.value);
						console.log(this.state.dsGrp);
						break;
					default : break;
				}
			}
		}
	}
	/*------------------------------------------------------------------------------------------------*/
	// [7. render Zone]
	//  - 화면 관련 내용 작성
	/*------------------------------------------------------------------------------------------------*/
	render () {
		// 화면 그림 리턴
		console.log('parent');
		return (
			<React.Fragment>

				<ComponentPanel>
					<SubFullPanel>						
						<i className="xi-message xi-x c-indigo-9"></i>
					</SubFullPanel>
				</ComponentPanel>

				<ComponentPanel>
					<SubFullPanel>						
					<i className="xi-arrow-left xi-x c-grey-6"></i><i className="xi-arrow-right xi-x c-grey-6"></i>
					</SubFullPanel>
				</ComponentPanel>

				<ComponentPanel>
					<SubFullPanel>
						<label style={{marginRight : '20px'}}>Button Component</label>
						<Button
							id = {this.state.buttonProps.id}
							value = {this.state.buttonProps.value}
							disabled = {this.state.buttonProps.disabled}
							hidden = {this.state.buttonProps.hidden}
							onClick = {this.event.button.onClick}
							mr = {20}
						/>
						<Button
							id = {'btntestcall'}
							value = {'콜평가현황'}
							onClick = {this.event.button.onClick}
							mr = {20}
						/>
						<Button value="조회" color="purple" fiiled="o" innerImage={true} icon = {'srch'} mt="5px"/>
						
						<Button value="신규" color="green" mt="5px"/>
						
						<Button value="저장" color="blue" fiiled="o" mt="5px"/>
						
						<Button value="복사" color="green" fiiled="o" mt="10px"/>

						<Button value="삭제" color="red" mt="5px"/>

						<RFloatArea>
							<Button
								id = 'btnDisabled'
								value = '버튼 Disabled 하기'
								disabled = {false}
								onClick = {this.event.button.onClick}
							/>
						</RFloatArea>
					</SubFullPanel>
					<SubFullPanel>
						<label style={{marginRight : '20px'}}>TextFiled Component</label>
						<FlexPanel>
							<label style={{marginRight : '20px'}}>문자 입력</label>
							<Textfield
								width = {300}
								id = {this.state.textFieldProps.string.id}
								name =  {this.state.textFieldProps.string.name}
								value =  {this.state.textFieldProps.string.value}
								placeholder =  {this.state.textFieldProps.string.placeholder}
								minLength =   {this.state.textFieldProps.string.minLength}
								maxLength =   {this.state.textFieldProps.string.maxLength}
								readOnly =  {this.state.textFieldProps.string.readOnly}
								disabled =  {this.state.textFieldProps.string.disabled}
								onChange = {this.event.input.onChange}
							/>
						</FlexPanel>
						<FlexPanel>
							<label style={{marginRight : '20px'}}>숫자만 입력</label>
							<Textfield
								width = {300}
								type = "onlyNum"
								id = {this.state.textFieldProps.number.id}
								name =  {this.state.textFieldProps.number.name}
								value =  {this.state.textFieldProps.number.value}
								placeholder =  {this.state.textFieldProps.number.placeholder}
								minLength =   {this.state.textFieldProps.number.minLength}
								maxLength =   {this.state.textFieldProps.number.maxLength}
								readOnly =  {this.state.textFieldProps.number.readOnly}
								disabled =  {this.state.textFieldProps.number.disabled}
								onChange = {this.event.input.onChange}
							/>
						</FlexPanel>
					</SubFullPanel>
					<SubFullPanel>
						<label style={{marginRight : '20px'}}>Radio Component</label>
						<Radio  id = {this.state.radioProps.id}
								dataset = {this.state.radioProps.dataset}
								keyProp = {this.state.radioProps.keyProp}
								value = {this.state.radioProps.value}
								disabled = {this.state.radioProps.disabled}
								defaultSelected = {2}
								selected = {this.state.radioProps.selected}
								data = {this.state.radioProps.data}
								onChange = {this.event.radio.onChange}
						/>
					</SubFullPanel>
					<SubFullPanel>
						<label style={{marginRight : '20px'}}> Single Checkbox Component </label>
						<Checkbox   id = {this.state.singleCheckProp.id}
									keyProp = {this.state.singleCheckProp.keyProp}
									value = {this.state.singleCheckProp.value}
									checked = {this.state.singleCheckProp.checked}
									disabled = {this.state.singleCheckProp.disabled}
									onChange = {this.event.checkbox.onChange}
						/>
					</SubFullPanel>
					<SubFullPanel>
						<label style={{marginRight : '20px'}}> Mulit Checkbox Component </label>
						<MultiCheckBox
									id = {this.state.multiCheckProps.id}
									dataset = {this.state.multiCheckProps.dataset}
									keyProp = {this.state.multiCheckProps.keyProp}
									value = {this.state.multiCheckProps.value}
									disabled = {this.state.multiCheckProps.disabled}
									onChange = {this.event.checkbox.onChange}
						/>
					</SubFullPanel>
					<SubFullPanel>
						<label style={{marginRight : '20px'}}> InputCalendar Component </label>
						<InputCalendar
									id = {this.state.calendarProps.id}
									value = {this.state.calendarProps.value}
									disabled = {this.state.calendarProps.disabled}
									onChange = {this.event.inputcalendar.onChange}
									direction = {'up'}
						/>
					</SubFullPanel>
					<SubFullPanel>
						<label style={{marginRight : '20px'}}> RangeInputCalendar Component </label>
						<RangeInputCalendar
							id = {this.state.rangeCalendarProps.id}
							strtId  = {this.state.rangeCalendarProps.strtId}
							endId  = {this.state.rangeCalendarProps.endId}
							startDate = {this.state.rangeCalendarProps.startDate}
							endDate = {this.state.rangeCalendarProps.endDate}
							onChange = {this.event.inputcalendar.onChange}
						/>
					</SubFullPanel>
				</ComponentPanel>
				<ComponentPanel>
					<SubFullPanel>
						<ScrmRadialBarChart/>
					</SubFullPanel>
				</ComponentPanel>
				<ComponentPanel>
					<SubFullPanel>
					<Textarea></Textarea>
						<label style={{marginRight : '20px'}}>Button Component</label>
						<Button
							id = {this.state.popupProps.alert.id}
							value = {this.state.popupProps.alert.value}
							disabled = {this.state.popupProps.alert.disabled}
							hidden = {this.state.popupProps.alert.hidden}
							onClick = {this.event.button.onClick}
							mr = {10}
						/>
						<Button
							id = {this.state.popupProps.confirm.id}
							value = {this.state.popupProps.confirm.value}
							disabled = {this.state.popupProps.confirm.disabled}
							hidden = {this.state.popupProps.confirm.hidden}
							onClick = {this.event.button.onClick}
							mr = {10}
						/>
						<Button
							id = {this.state.popupProps.modal.id}
							value = {this.state.popupProps.modal.value}
							disabled = {this.state.popupProps.modal.disabled}
							hidden = {this.state.popupProps.modal.hidden}
							onClick = {this.event.button.onClick}
							mr = {10}
						/>
						<Button
							id = {this.state.popupProps.modaless.id}
							value = {this.state.popupProps.modaless.value}
							disabled = {this.state.popupProps.modaless.disabled}
							hidden = {this.state.popupProps.modaless.hidden}
							onClick = {this.event.button.onClick}
							mr = {10}
						/>
					</SubFullPanel>
					<SubFullPanel>
						<FlexPanel>
							<SubFullPanel width="20%">
								<label style={{marginRight : '20px'}}> Selectbox Component </label>
							</SubFullPanel>
							<FullPanel>
								<SubFullPanel>
									<Selectbox
										id = {this.state.selectboxProps.id}
										value = {this.state.value}
										dataset = {this.state.selectboxProps.dataset}
										width = {this.state.selectboxProps.width}
										disabled = {this.state.selectboxProps.disabled}
										selected = {this.state.selectboxProps.selected}
										onChange= {this.event.selectbox.onChange}
									/>
									<Selectbox
										id = {"cmbCent"}
										dataset = {ComLib.convComboList(ComLib.getCentList(), newScrmObj.constants.select.argument.select)}
										value = {this.state.dsGrp.records[0]["CENT_CD"]}
										width = {200}
										disabled = {false}
										onChange = {this.event.selectbox.onChange}
									/>
									<Selectbox
										id = {"cmbTeam"}
										dataset = {ComLib.convComboList(ComLib.getTeamList(this.state.dsGrp), newScrmObj.constants.select.argument.all)}

										value = {this.state.dsGrp.records[0]["TEAM_CD"]}
										width = {200}
										disabled = {false}
										onChange = {this.event.selectbox.onChange}
									/>
									<Selectbox
										id = {"cmbUser"}
										dataset = {ComLib.convComboList(ComLib.getUserList(this.state.dsGrp), newScrmObj.constants.select.argument.none)}
										value = {this.state.dsGrp.records[0]["USR_CD"]}
										width = {200}
										disabled = {false}
										onChange = {this.event.selectbox.onChange}
									/>
									<Selectbox
										id = {"cmbComm"}
										dataset = {ComLib.convComboList(ComLib.getCommCodeList('100'), newScrmObj.constants.select.argument.none)}
										width = {200}
										disabled = {false}
										onChange = {this.event.selectbox.onChange}
									/>
								</SubFullPanel>
								<SubFullPanel>
									<MulitSelectBox
										id = {this.state.multiSelectboxProps.id}
										dataset = {this.state.multiSelectboxProps.dataset}
										keyProp = {this.state.multiSelectboxProps.keyProp}
										value = {this.state.multiSelectboxProps.value}
										width = {this.state.multiSelectboxProps.width}
										disabled = {this.state.multiSelectboxProps.disabled}
										displayCount = {this.state.multiSelectboxProps.displayCount}
										onChange = {this.event.selectbox.onChange}
									/>
								</SubFullPanel>
							</FullPanel>
						</FlexPanel>
					</SubFullPanel>
					<SubFullPanel>
						{/* <Tree
							id = {this.state.treeProps.id}
							dataset = {this.state.treeProps.dataset}
						/> */}
					</SubFullPanel>
				</ComponentPanel>
			</React.Fragment>
		);
	}
}

export default View;