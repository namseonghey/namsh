import React from 'react';
import Main from './main';
import Footer from './footer';
import Header from './header';
import {AppPanel, HeadPanel, MiddlePanel, MainPanel, FooterPanel} from 'components';
import {ComLib, DataLib, TransManager} from 'common';

import { connect } from 'react-redux';
import { bindActionCreators } from 'redux';
import * as appModuleActions from 'store/modules/appModule';

class AppMain extends React.Component {
	/*******************************************************************
	 * Constructor
	 *******************************************************************/
	constructor() {
		super();
		if (ComLib.getSession("SYSTEM_DV") != "L") {
			this.event.window.onbeforeunload = this.event.window.onbeforeunload.bind(this);
			this.event.window.onunload = this.event.window.onunload.bind(this);
		}
	}

	state = {
		dsUser: DataLib.datalist.getInstance(),
		menu: ComLib.getSession("gdsMenu").filter(item => item.MNU_TP === '10' || item.MNU_TP === '20')
	}

	/*******************************************************************
	 * Event
	 *******************************************************************/
	componentDidMount() {
		const {AppModuleAction} = this.props;
		AppModuleAction.addTray(ComLib.getInitScreen());

		this.state.dsUser.setRecords(ComLib.getSession("gdsUserInfo"));

		if (ComLib.getSession("SYSTEM_DV") != "L") {
			window.addEventListener('beforeunload', this.event.window.onbeforeunload);
			window.addEventListener('unload', this.event.window.onunload);
		}
	}
	componentWillUnmount() {
		if (ComLib.getSession("SYSTEM_DV") != "L") {
			window.removeEventListener('beforeunload', this.event.window.onbeforeunload);
			window.removeEventListener('unload', this.event.window.onunload);
		}
	}
	componentDidUpdate () {
		this.handler.trayWidthTransform();
	}
	event = {
		window: {
			onbeforeunload: (e) => {
				if (!ComLib.getSession("logoutComplete")) e.returnValue = "로그아웃?";
			},
			onunload: (e) => {
				if (!ComLib.getSession("logoutComplete")) {
					if (this.validation("BASE_D01")) this.transaction("BASE_D01");
				}
			}
		}
	}

	/*******************************************************************
	 * Validation
	 *******************************************************************/
	validation = (serviceid) => {
		switch(serviceid) {
		case 'BASE_D01':
			break;
		default : break;
		}

		this.setdata(serviceid);

		return true;
	}

	/*******************************************************************
	 * Set Data
	 *******************************************************************/
	setdata = (serviceid) => {
		switch(serviceid) {
		case 'BASE_D01':
			this.state.dsUser.setValue(0, "PS_STA_CD", "20");
			break;
		default: break;
		}
	}

	/*******************************************************************
	 * Transaction
	 *******************************************************************/
	transaction = (serviceid) => {
		let transManager = new TransManager();
		try {
			switch(serviceid) {
			case 'BASE_D01':
				transManager.setTransId(serviceid);
				transManager.setTransUrl(transManager.constants.url.common);
				transManager.setCallBack(this.callback);
				transManager.setAsync(false);
				transManager.addConfig({
					dao: transManager.constants.dao.base,
					crudh: transManager.constants.crudh.update,
					sqlmapid:"COM.U_setLogoutInfo",
					datasetsend:"dsUsr",
				});
				transManager.addDataset('dsUsr', this.state.dsUser.getTransRecords());
				transManager.agent();

				break;
			default: break;
			}
		} catch (err) {
			console.log(err);
		}
	}

	/*******************************************************************
	 * Callback
	 *******************************************************************/
	callback = (res) => {
		switch(res.id) {
		case 'BASE_D01':
			break;
		default: break;
		}
	}

	/*******************************************************************
	 * User Function
	 *******************************************************************/
	handler = {
		trayWidthTransform : () => {
			// 전체 tray width 에서 버튼 영역의 width 제거 ()
			let width = document.getElementById('_trayPanelMenu').offsetWidth - document.getElementById('_trayPanelMenu').querySelector('.scrm-rfloat-div').offsetWidth;
			let trayWidth = 0;
			for (let intA = 0; intA < document.getElementById('_ul_mainTrayDiv').children.length; intA ++) {
				// 15px 만큼의 padding이 잡혀 있어 해당 px도 포함
				trayWidth += (document.getElementById('_ul_mainTrayDiv').children[intA].offsetWidth + 15);
			}
			if (width > trayWidth) {
				document.getElementById('_ul_mainTrayDiv').style.transform = "translateX(0)";
			} else {
				// 첫번째 행이 셀렉트 인 경우, tray 원위치
				if (document.getElementById('_ul_mainTrayDiv').querySelector('.scrm-tray-div-li-selected').id === document.getElementById('_ul_mainTrayDiv').children[0].id) {
					document.getElementById('_ul_mainTrayDiv').style.transform = "translateX(0)";
				} else {
					// ul tag에 잡혀있는 margin이 50px이라 그만큼 빼줌
					if (document.getElementById('_ul_mainTrayDiv').querySelector('.scrm-tray-div-li-selected').getBoundingClientRect().x-50  < 0) {
						document.getElementById('_ul_mainTrayDiv').style.transform = "translateX(" + ((document.getElementById('_ul_mainTrayDiv').getBoundingClientRect().x - document.getElementById('_ul_mainTrayDiv').querySelector('.scrm-tray-div-li-selected').getBoundingClientRect().x) + 50).toString() + "px)";
					} else {
						// 선택된 트레이의 right 좌표가 트레이 너비보다 클 경우, 트레이 div 위치 이동
						if (document.getElementById('_ul_mainTrayDiv').querySelector('.scrm-tray-div-li-selected').getBoundingClientRect().right > width) {
							document.getElementById('_ul_mainTrayDiv').style.transform = "translateX(" + (width - trayWidth - 50).toString() + "px)";
						}
					}
				}
			}
		}
	}
	render () {
		const {selected, tray, popupList} = this.props;
		const {AppModuleAction} = this.props;
		
		return(
			<AppPanel>
				<HeadPanel>
					<Header menu={this.state.menu} openMenu = {AppModuleAction.addTray}/>
				</HeadPanel>
				<MiddlePanel>
					<MainPanel width="100%">
						<Main
							menu = {this.state.menu}
							tray={tray}
							selected = {selected}
							openMenu = {AppModuleAction.addTray}
							closeMenu = {AppModuleAction.delTray}
							prevMenu = {AppModuleAction.prevTray}
							nextMenu = {AppModuleAction.nextTray}
							selectMenu = {AppModuleAction.selectTray}
							closeAllMenu = {AppModuleAction.delAllTray}
						/>
					</MainPanel>
				</MiddlePanel>
				<FooterPanel>
					<Footer popupList = {popupList}/>
				</FooterPanel>
			</AppPanel>
		);
	}
}
export default connect(
	(state) => ({
		selected : state.appModule.selected,
		tray : state.appModule.tray,
		popupList : state.appModule.popupList,
	}),
	(dispatch) => ({
		AppModuleAction : bindActionCreators(appModuleActions, dispatch)
	})
)(AppMain);