//STT 결과조회
import React from 'react';

import {
	ComponentPanel, FullPanel,  RFloatArea, LFloatArea, SearchPanel, FlexPanel, RelativeGroup
} from 'components';
//버튼 컴포넌트
import {BasicButton as Button, Label} from 'components';
import {Textfield, RangeInputCalendar, Selectbox} from 'components';
import {Grid} from 'components';
import {StrLib, TransManager, ComLib, DataLib, newScrmObj, DateLib} from 'common';
import axios from 'axios';
import { connect } from 'react-redux';

class View extends React.Component {
	constructor(props) {
		super();
			
		this.missSentGridApi = null;
		this.missSentGrid    = null;
		this.state = {
			resultTotal: 0,
			btnProps : {
				btnSearchProps : {
					id : 'btnJobFileSearchList',
					disabled : false,
					value : '조회',
					hidden : false
				},
			},
			gridSttResultList : {
				areaName : 'STT결과조회',
				id : 'gridSttResultList',
				header : 				
				[					
					 {headerName: '콜 아이디',	field: 'call_id',		colId: 'call_id',		editable: true, }
					,{headerName: '콜 종류',	field: 'call_tp',		 colId: 'call_tp',		editable: false, width : '130', 
						valueFormatter : (params) => { return ComLib.getComCodeName('CMN', params.value,'CALL_TP')}
					}
					,{headerName: '등록시간',	field: 'reg_dtm',	    colId: 'reg_dtm',	editable: false}	
					,{headerName: '파일 사이즈',field: 'file_size',		colId: 'file_size',	editable: false,	width: '100'}
					,{headerName: '녹취길이',	field: 'rec_tm',	colId: 'rec_length',	editable: false,	width: '100'}
					,{headerName: '상담원',  	field: 'const_cd',	colId: 'const_cd',	editable: false,	width: '100', 
						valueFormatter : (params) => { 
							let constList = ComLib.getSession("gdsConstList").filter(item => item.CODE === params.value);
							return constList[0].CODE_NM;
						}
					}
					,{headerName: '상담내용',	field: 'highlight',   	colId: 'highlight',	editable: false,	width: '200', 					
						cellRenderer : (params) => { 
							let text = params.value;
							if (text === undefined) {
								return null;
							}
							let strCnt = text.substring(0, text.indexOf('@'));

							text = text.substring(text.indexOf('@') + 1, text.length); 

							let start = text.indexOf('<strong') - 10;	

							if (start < 0) {
								start = 0
							}

							text = text.substring(start); 
													
							let end = text.lastIndexOf('</strong>') + 20;

							if (end > text.length) {
								end = text.length
							}
																		
							text = text.substring(0, end); 
							text = (start === 0 ? "" : "...") + text + "... (" + strCnt + ")"; 							
							text = text.replaceAll('<strong>', '<strong style="color: red;">')
							

							return text 	
						}
					}
					,{headerName: '상담내용',	    field: 'ACTION_ICON',	colId: 'ACTION_ICON',	width: 100, 
						cellRenderer: 'actionButton', 
						fiiled: true,
						color: 'blue'
					},
				],
				paging : {
					start: 0,
					size : Number(ComLib.getCentStndVl('00012','STND_VAL')),
					page : 1
				},	
			},
			rangeCalendarProps : {
				rgcSearchJob : {
					label : '작업기간',
					id : 'searchJobDateCalender',
					strtId : 'searchJobDateCalenderStart',
					endId : 'searchJobDateCalenderEnd',
					startDate : DateLib.getAddMonth(DateLib.getToday(), -3),
					endDate : DateLib.getToday(),
				},
				rgcSearchCall : {
					label : '통화기간',
					id : 'searchCallDateCalender',
					strtId : 'searchCallDateCalenderStart',
					endId : 'searchCallDateCalenderEnd',
					startDate : null,
					endDate : null,
				}
			},
			selectboxProps : {
				selCallTP : {
					id : 'selCallTP',
					dataset : ComLib.convComboList(ComLib.getCommCodeList('CMN', 'CALL_TP'), newScrmObj.constants.select.argument.all),
					width : 120,
					selected : 0,
					disabled : false,
					label : "콜구분"
				},
				selCenterList : {
					id : 'selCenterList',
					dataset : ComLib.convComboList(ComLib.getCentList(), newScrmObj.constants.select.argument.select),
					width : 120,
					selected : 0,
					disabled : false,
					label : "센터"
				},
				selTeamList : {
					id : 'selTeamList',
					width : 120,
					selected : 0,
					disabled : false,
					label : "팀",
					value : '',

				},
				selUserList : {
					id : 'selUserList',
					width : 120,
					selected : 0,
					disabled : false,
					label : "상담원명",
					value : '',
				},
			},
			textFieldProps : {
				iptSearch : {
					id : 'iptSearch',
					name : 'iptSearch',
					value : '',
					placeholder : '',
					minLength : 1,
					maxLength : 10,
					readOnly : false,
					disabled : false,
					label : '검색어',
					
				}
			},
			dsSttResultInfo : DataLib.datalist.getInstance(),
			dsSrch: DataLib.datalist.getInstance([{CENT_CD: ComLib.setOrgComboValue("CENT_CD"), TEAM_CD: ComLib.setOrgComboValue("TEAM_CD"), USR_CD: ""}]),
			// dsGrp: DataLib.datalist.getInstance([{CENT_CD: "", TEAM_CD: ComLib.setOrgComboValue("TEAM_CD"), USR_CD: ""}]), disabled : false,			
		}
		this.event.button.onClick = this.event.button.onClick.bind(this);
		this.event.inputcalendar.onChange = this.event.inputcalendar.onChange.bind(this);
		this.event.input.onChange   = this.event.input.onChange.bind(this);
	}
	
	/*------------------------------------------------------------------------------------------------*/
		// [2. React Lifecycle Method Zone] ==> 리액트 컴포넌트 생명주기 메소드
		// 참고 site : https://ko.reactjs.org/docs/react-component.html#constructor
	/*------------------------------------------------------------------------------------------------*/
	/*------------------------------------------------------------------------------------------------*
		1) componentDidMount () => init 함수 개념으로 이해하는게 빠름
		=> 컴포넌트가 마운트된 직후, 호출 ->  해당 함수에서 this.setState를 수행할 시, 갱신이 두번 일어나 render()함수가 두번 발생 -> 성능 저하 가능성
	 ------------------------------------------------------------------------------------------------*/
	 componentDidMount () {
		// console.log(ComLib.getSession("gdsConstList"))
		// console.log(ComLib.getConstList(this.state.dsSrch))
		// if (this.validation("STT020000_R01")) this.transaction("STT020000_R01");

	}
	/*------------------------------------------------------------------------------------------------*
		2) componentDidUpdate () => 갱신이 일어나 직후에 호춮 (최초 렌더링 시에는 호출되지 않음)
		=> prevProps와 현재 props를 비교할 수 있음 -> 조건문으로 감싸지 않고 setState를 실행할 시, 무한 반복 가능성 -> 반드시 setState를 쓰려면 조건문으로 작성
	 ------------------------------------------------------------------------------------------------*/
	componentDidUpdate (prevProps, prevState, snapshot) {
		
	}
	/*------------------------------------------------------------------------------------------------*
		3) componentWillUnmount () => 컴포넌트가 마운트 해제되어 제거되기 직전에 호출
		=> 타이머 제거, 네트워크 요청 취소 등 수행 -> 마운트가 해제되기 때문에 setState를 호출하면 안됨
	 ------------------------------------------------------------------------------------------------*/
	componentWillUnmount () {

	}

	/*------------------------------------------------------------------------------------------------*/
	// [3. validation Event Zone]
	//  - validation 관련 정의
	/*------------------------------------------------------------------------------------------------*/
	validation = (transId) => {

		switch (transId) {
			case 'STT080000_R01' :
				
				if(this.state.rangeCalendarProps.rgcSearchJob.startDate > this.state.rangeCalendarProps.rgcSearchJob.endDate ) {
					ComLib.openDialog('A', 'SYSI0010', ['검색 시작일자가 종료일자보다 클 수 없습니다.']);
					return false;
				}
				// if (StrLib.isNull(this.state.textFieldProps.iptSearch.value)) {
				// 	ComLib.openDialog('A', 'SYSI0010', ['검색어는 필수 입니다.']);
				// 	return false;
				// }
				break;
			default :
				break;
		}
		return true;
	}
	handler = {
		setDs : (transId) => {
			switch (transId) {
			case "STT080000_R01" :

				let state = this.state;

				state['gridSttResultList']['paging'].start = 0;
				state['gridSttResultList']['paging'].page = 1;

				this.setState(state, () => {
					this.axiosTransaction("new");
				});
				break;
			}
		}
	}
	/*------------------------------------------------------------------------------------------------*/
	// [4. transaction Event Zone]
	//  - transaction 관련 정의
	/*------------------------------------------------------------------------------------------------*/
	
	/*------------------------------------------------------------------------------------------------*/
	// [5. Callback Event Zone]
	//  - Callback 관련 정의
	/*------------------------------------------------------------------------------------------------*/


	/*------------------------------------------------------------------------------------------------*/
	// [6. event Zone]
	//  - 각 Component의 event 처리
	/*------------------------------------------------------------------------------------------------*/
	setTransDate = () => {
		let dsSrchParamInfo = {"from": this.state.gridSttResultList.paging.start,"size": this.state.gridSttResultList.paging.size,"query":{"bool":{"must":[]}},"highlight": {"fields": {"stt_rslt": {}},"pre_tags": [`<strong>`],"post_tags": ["</strong>"]}};
		let must = [];
		let searchTxt = this.state.textFieldProps.iptSearch.value

		if (!StrLib.isNull(searchTxt)) {
			if (searchTxt.search(/\s/) != -1) { 
				must.push({"match":{"stt_rslt": {"query":this.state.textFieldProps.iptSearch.value, "operator":"and"}}}) 
	
			} else { 
				must.push({"match":{"stt_rslt": {"query":this.state.textFieldProps.iptSearch.value}}}) 
	
			}
		}		

		if (!StrLib.isNull(this.state.rangeCalendarProps.rgcSearchJob.startDate)) {
			must.push({"range":{"reg_dtm":{"gte":this.state.rangeCalendarProps.rgcSearchJob.startDate,"lte":this.state.rangeCalendarProps.rgcSearchJob.endDate,"format": "yyyyMMdd"}}})

		}
		if (!StrLib.isNull(this.state.selectboxProps.selCallTP.value)) {
			must.push({"match":{"call_tp": {"query":this.state.selectboxProps.selCallTP.value}}})

		}
		if (!StrLib.isNull(this.state.selectboxProps.selUserList.value)) {
			must.push({"match":{"const_cd": {"query":this.state.selectboxProps.selUserList.value}}})

		}
		must.push({"match":{"job_tp": {"query":"R"}}});
		dsSrchParamInfo.query.bool.must = must;

		return dsSrchParamInfo;

	}
	
	axiosTransaction = async(test) => {
		let transdata = JSON.stringify(this.setTransDate())
		let data = transdata.replace(/%/g, '％').replace(/=/g, '＝').replace(/&amp;/g, '＆').replace(/&/g, '＆');
				
		const reqOptions = {
			method: 'post',

			url: 'http://192.168.0.248:9200/stt_data/_search?pretty',
			data: data,
			headers: {				
				"Content-Type": 'application/json',
			},
		};
		try {
			console.log('request => ');			
			console.log(reqOptions);
			const resData = await axios(reqOptions);
			console.log('response => ');
			
			console.log(resData);
			let orgData = resData.data.hits.hits;
			let total   = resData.data.hits.total.value;

			let gridData = []
			let cnt = Number(this.state.gridSttResultList.paging.start)
			
			let searchChar = this.state.textFieldProps.iptSearch.value; 

			for (let i = 0; i < orgData.length; i ++) {
				gridData.push({})

				let text = orgData[i]._source.stt_rslt;
				let regexAll = new RegExp(searchChar, "g");
				let results = text.match(regexAll); 

				if (orgData[i].highlight !== undefined) {
					gridData[i].highlight = results.length + "@" + orgData[i].highlight.stt_rslt[0];

				}
				gridData[i].ACTION_ICON = 'message'
				let dtm = orgData[i]._source.reg_dtm;
				let reg_dtm = dtm.substring(0, 10) + " " + dtm.substring(11, 19)
				
				let time = orgData[i]._source.rec_tm;
				
				let secs = time % 60;
				time = (time - secs) / 60;
				let mins = time % 60;
				let hrs = (time - mins) / 60;
				let rec_tm = (hrs > 0 ? hrs + "시간 " : "") + mins + "분 " + secs + "초";
				
				let size = orgData[i]._source.file_size;
				let b = size % 1000;
				size = (size - b) / 1000;
				let kb = size % 1000;
				size = (size - kb) / 1000;

				let file_size = size + "." + kb + " MB"

				gridData[i].reg_dtm   = reg_dtm;  
				gridData[i].job_tp    = orgData[i]._source.job_tp;
				gridData[i].stt_unq   = orgData[i]._source.stt_unq; 
				gridData[i].rec_tm    = rec_tm;   
				gridData[i].call_tp   = orgData[i]._source.call_tp; 
				gridData[i].const_cd  = orgData[i]._source.const_cd;
				gridData[i].stt_rslt  = orgData[i]._source.stt_rslt; 
				gridData[i].call_id   = orgData[i]._source.call_id;  
				gridData[i].file_size = file_size;  
				gridData[i].rowtype   = 'r';
				gridData[i].recid     = cnt;
				gridData[i].searchTxt = this.state.textFieldProps.iptSearch.value;

				cnt ++;			

			}
			console.log("toGrid => ")
			console.log(gridData)
			
			if (total !== this.state.resultTotal) {
				this.setState({...this.state, resultTotal: Number(total)})
			}
			
			ComLib.setStateInitRecords(this, "dsSttResultInfo", gridData);

			this.setState({...this.state
				, gridSttResultList : { ...this.state.gridSttResultList
					, paging : { ...this.state.gridSttResultList.paging
						, loading : false
					}
				}
			});

			//return resData;

		} catch (err) {
			console.log('catch => ');
			console.log(err);
			ComLib.openDialog('A', 'SYSI0010', ['서버 오류 발생\n로그를 확인하십시오.']);
		}
				
	}
	event = {
		// 버튼 이벤트
		button : {
			onClick : (e) => {
				switch (e.target.id) {
				case "btnJobFileSearchList" :
					if (this.validation("STT080000_R01")) {
						this.handler.setDs('STT080000_R01');
					}
					break;
				default : break;
				}
			}
		}, 
		inputcalendar : {
			onChange : (e) => {
				switch (e.target.id) {
				case 'searchJobDateCalender':
					
					this.setState({...this.state, 
							rangeCalendarProps : {...this.state.rangeCalendarProps
													, rgcSearchJob : 
														{...this.state.rangeCalendarProps.rgcSearchJob, startDate : e.startDate, endDate : e.endDate}
												}});
				break; 
				case 'searchCallDateCalender':
					this.setState({...this.state, 
						rangeCalendarProps : {...this.state.rangeCalendarProps
												, rgcSearchCall : 
													{...this.state.rangeCalendarProps.rgcSearchCall, startDate : e.startDate, endDate : e.endDate}
											}});
				break;
				default : break;
				}
			}
		},
		selectbox: {
			onChange: (e) => {
				switch (e.id) {
				case 'selCallTP':
					this.setState({...this.state, 
						selectboxProps : {...this.state.selectboxProps
												, selCallTP : 
													{...this.state.selectboxProps.selCallTP, selected : e.target.selectedIndex, value : e.target.value}
										}});
					ComLib.setStateValue(this, "dsSrch", 0, "CENT_CD", e.target.value, "TEAM_CD", "");
					
				break;
				case 'selCenterList':
					this.setState({...this.state, 
						selectboxProps : {...this.state.selectboxProps
												, selCenterList : 
													{...this.state.selectboxProps.selCenterList, selected : e.target.selectedIndex, value : e.target.value}
										}});
					ComLib.setStateValue(this, "dsSrch", 0, "CENT_CD", e.target.value, "TEAM_CD", "");
					
				break;
				case 'selTeamList':
					this.setState({...this.state, 
						selectboxProps : {...this.state.selectboxProps
												, selTeamList : 
													{...this.state.selectboxProps.selTeamList, selected : e.target.selectedIndex, value : e.target.value}
										}});
					ComLib.setStateValue(this, "dsSrch", 0, "TEAM_CD", e.target.value);	
				break;
				case 'selUserList':
					this.setState({...this.state, 
						selectboxProps : {...this.state.selectboxProps
												, selUserList : 
													{...this.state.selectboxProps.selUserList, selected : e.target.selectedIndex, value : e.target.value}
										}});
					ComLib.setStateValue(this, "dsSrch", 0, "CONST_CD", e.target.value);	
				break;
				default : break;
				}
			},
		},
		grid: {
			onActionCellClicked : (e) => {
				let option = { width: '600px', height: '740px', modaless: true, callId : e.data.call_id, useUuid: false, srchText: e.data.searchTxt}
				ComLib.openPlayer(option);
				
			},
			onGridReady : (e) => {

			},
			//스크롤이 필요한가에 대한 검토 현재는 미적용
			onScrollEnd: (e) => {
				if (!this.state.gridSttResultList.paging.loading) {
					this.setState({...this.state
						, gridSttResultList : { ...this.state.gridSttResultList
							, paging : { ...this.state.gridSttResultList.paging
								, start : this.state.gridSttResultList.paging.start + this.state.gridSttResultList.paging.size
								, page : this.state.gridSttResultList.paging.page + 1
								, loading : true
							}
						}
					}, () => {
						this.axiosTransaction("old");
					});
				}
			},
		},
		input : {
			onChange : (e) => {
				switch (e.target.id) {
					case 'iptSearch' :
						this.setState({...this.state
							, textFieldProps : { ...this.state.textFieldProps
								,iptSearch : { ...this.state.textFieldProps.iptSearch, value : e.target.value }
							}});
					break;
					default : break;
				}
			},
			onKeyPress: (e) => {
				switch (e.target.id) {
				case 'iptSearch' :
					if (e.key === 'Enter') {
						// if(this.validation("STT020000_R01")) {
						// 	this.transaction("STT020000_R01")
						// }
					}
					break;
				default: break;
				}
			},
		},
	}	

	render () {
		return (
			<React.Fragment>
				<FullPanel>					
					<SearchPanel>
						<RelativeGroup>
							<LFloatArea>
								<FlexPanel>
									<Label value="검색어"/>
									<Textfield
										width       = {200}
										id          = {this.state.textFieldProps.iptSearch.id}
										name        = {this.state.textFieldProps.iptSearch.name}
										value       = {this.state.textFieldProps.iptSearch.value}
										placeholder = {this.state.textFieldProps.iptSearch.placeholder}
										minLength   = {this.state.textFieldProps.iptSearch.minLength}
										maxLength   = {this.state.textFieldProps.iptSearch.maxLength}
										readOnly    = {this.state.textFieldProps.iptSearch.readOnly}
										disabled    = {this.state.textFieldProps.iptSearch.disabled}
										onChange    = {this.event.input.onChange}
										onKeyPress  = {this.event.input.onKeyPress}
									/>
									<Label value={this.state.rangeCalendarProps.rgcSearchJob.label}/>
									<RangeInputCalendar
										id = {this.state.rangeCalendarProps.rgcSearchJob.id}
										strtId  = {this.state.rangeCalendarProps.rgcSearchJob.strtId}
										endId  = {this.state.rangeCalendarProps.rgcSearchJob.endId}	
										startDate = {this.state.rangeCalendarProps.rgcSearchJob.startDate}
										endDate = {this.state.rangeCalendarProps.rgcSearchJob.endDate}
										onChange = {this.event.inputcalendar.onChange}
									/>	
									<Label value={this.state.selectboxProps.selCallTP.label}/>
									<Selectbox
										id       = {this.state.selectboxProps.selCallTP.id}
										value    = {this.state.selectboxProps.selCallTP.value}
										dataset  = {this.state.selectboxProps.selCallTP.dataset}
										width    = {this.state.selectboxProps.selCallTP.width}
										disabled = {this.state.selectboxProps.selCallTP.disabled}
										selected = {this.state.selectboxProps.selCallTP.selected}
										onChange = {this.event.selectbox.onChange}
									/>
									{/* <Label value={this.state.selectboxProps.selCenterList.label}/>
									<Selectbox
										id = {this.state.selectboxProps.selCenterList.id}
										dataset = {this.state.selectboxProps.selCenterList.dataset}
										value = {this.state.dsSrch.records[0]["CENT_CD"]}
										width = {this.state.selectboxProps.selCenterList.width}
										disabled = {this.state.selectboxProps.selCenterList.disabled}
										onChange = {this.event.selectbox.onChange}
									/> */}
									{/* <Label value={this.state.selectboxProps.selTeamList.label}/> */}
									{/* <Selectbox
									 	id = {this.state.selectboxProps.selTeamList.id}
									 	dataset = {ComLib.convComboList(ComLib.getTeamList(this.state.dsSrch), newScrmObj.constants.select.argument.select)}
									 	value = {this.state.dsSrch.records[0]["TEAM_CD"]}
									 	width = {this.state.selectboxProps.selTeamList.width}
										disabled = {this.state.selectboxProps.selTeamList.disabled}
									 	onChange = {this.event.selectbox.onChange}
									/> */}
									<Label value={this.state.selectboxProps.selUserList.label}/>
									<Selectbox
										id = {this.state.selectboxProps.selUserList.id}
										dataset = {ComLib.convComboList(ComLib.getConstList(this.state.dsSrch), newScrmObj.constants.select.argument.all)}
										value = {this.state.dsSrch.records[0]["CONST_CD"]}
										width = {this.state.selectboxProps.selUserList.width}
										disabled = {this.state.selectboxProps.selUserList.disabled}
										onChange= {this.event.selectbox.onChange}
									/>
								</FlexPanel>
							</LFloatArea>
							<RFloatArea>
								<Button
									color= 'blue' fiiled= {true} innerImage={true} icon = {'srch'}
									id = {this.state.btnProps.btnSearchProps.id}
									value = {this.state.btnProps.btnSearchProps.value}
									disabled = {this.state.btnProps.btnSearchProps.disabled}
									hidden = {this.state.btnProps.btnSearchProps.hidden}
									onClick = {this.event.button.onClick}
									mt = {5}
								/>
							</RFloatArea>
						</RelativeGroup>
					</SearchPanel>
					<ComponentPanel>
						<Grid
							areaName = {this.state.gridSttResultList.areaName}
							id       = {this.state.gridSttResultList.id}
							height   = "600px"
							header   = {this.state.gridSttResultList.header}
							data     = {this.state.dsSttResultInfo}			

							addRowBtn   = {false}
							delRowBtn   = {false}
							dnlExcelBtn = {true}
							rowNum      = {true}							
							paging      = {true}
							infinite    = {true}
							suppressRowClickSelection = {true}

							totalRowCnt = {this.state.resultTotal}

							onGridReady        = {this.event.grid.onGridReady}	
							onScrollEnd        = {this.event.grid.onScrollEnd}		
							onActionCellClicked= {this.event.grid.onActionCellClicked}			

						/>
					</ComponentPanel>
				</FullPanel>
			</React.Fragment>
		)
	}
}

export default View;