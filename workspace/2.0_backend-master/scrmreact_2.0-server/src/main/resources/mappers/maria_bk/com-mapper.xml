<?xml version="1.0" encoding="EUC-KR"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="COM">
	<select id="R_doLogin" parameterType="java.util.HashMap" resultType="java.util.HashMap">
		SELECT
			CASE WHEN MAX(A.USR_CD) IS NULL THEN 'USR_CD'
				 WHEN MAX(C.PWD_ERR_CNT) <![CDATA[>=]]> (SELECT CASE WHEN A.CNT = '0'
																	 THEN '5'
																	 ELSE A.STND_VL 
																	 END AS STND_VL
													  	 FROM ( SELECT STND_VL
															    	 , COUNT(STND_VL) AS CNT
															    FROM   TBL_SYS_CENT_SETVL_INF
																WHERE  CENT_CD = (SELECT CENT_CD FROM STT_TBL_USR WHERE USR_CD = #{USR_CD})
																AND    STND_CD = '00002'
																AND    APY_YN  = 'Y') A
														) THEN 'MAX_ERR'	
				 WHEN MAX(C.PWD) != #{PWD} THEN 'PWD_ERR'
				 WHEN MAX(C.REG_DTM) <![CDATA[<=]]> DATE_SUB(CURRENT_DATE(), INTERVAL (SELECT CASE WHEN A.CNT = '0'
																							 	   THEN '90'
																							 	   ELSE A.STND_VL 
																								   END AS STND_VL
																			          FROM (
																							SELECT STND_VL
																							 	 , COUNT(STND_VL) AS CNT
																							FROM   TBL_SYS_CENT_SETVL_INF
																							WHERE  CENT_CD = (SELECT CENT_CD FROM STT_TBL_USR WHERE USR_CD = #{USR_CD})
																							AND    STND_CD = '00003'
																							AND    APY_YN  = 'Y'
																					) A) DAY) THEN 'INIT'
				 WHEN MAX(C.INI_PWD_YN) = 'Y' THEN 'INIT'
				 WHEN MAX(B.USR_CD) IS NOT NULL AND MAX(B.CONN_IP) != #{G_CONN_IP} THEN 'LOGIN'
			ELSE 'Y' END AS RST_CD
			, MAX(A.CENT_CD) AS CENT_CD
			, MAX(A.USR_CD) AS USR_CD
			, MAX(A.AUTH_LV) AS AUTH_LV
			, MAX(A.TEAM_CD) AS TEAM_CD
			, '' AS PS_STA_CD
			, MAX(C.PWD_ERR_CNT) AS PWD_ERR_CNT
		FROM STT_TBL_USR A
		LEFT OUTER JOIN TBL_SYS_LGN B
		ON (A.USR_CD = B.USR_CD)
		LEFT OUTER JOIN STT_TBL_USR_PWD C
		ON (C.USR_CD = A.USR_CD)
		WHERE A.USR_CD = #{USR_CD}
		AND C.REG_DTM = (
			SELECT MAX(REG_DTM) FROM STT_TBL_USR_PWD WHERE USR_CD = #{USR_CD}
		)
	</select>
	
	
	<select id="R_srchSnroInfo" parameterType="java.util.HashMap" resultType="java.util.HashMap">
		SELECT SNRO_CONT 
			 , ANS_CONT
			 , ANS_TP_CD
			 , SEQ_NO
		FROM   TBL_APP_SNRO_MNG
		WHERE  TGT_SEQ_NO = #{TGT_SEQ}			
	</select>
	<select id="R_srchSnroInfoDefualt" parameterType="java.util.HashMap" resultType="java.util.HashMap">
		SELECT SNRO_CONT 
			 , ANS_CONT
			 , SEQ_NO
		FROM   TBL_APP_SNRO_MNG
		WHERE  TGT_SEQ_NO = '999999'			
	</select>
	<update id="U_doLoginAfter" parameterType="java.util.HashMap">
		INSERT INTO TBL_SYS_LGN (
			CONN_IP
			, USR_CD
			, LGN_DTM
		) VALUES (
			#{G_CONN_IP}
			, #{USR_CD}
			, CURRENT_TIMESTAMP()
		)
		ON DUPLICATE KEY
		UPDATE
			LGN_DTM = CURRENT_TIMESTAMP()
	</update>
	
	<delete id="D_delLogoutInfo" parameterType="java.util.HashMap">
		DELETE FROM TBL_SYS_LGN
		WHERE USR_CD = #{G_USR_CD}
	</delete>
	
	<select id="R_getMenuList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
		SELECT
			A.MNU_ID
			, A.MNU_NM
			, A.PARE_MNU_ID
			, A.SORT_ORD
			, A.USE_YN
			, A.PGM_PATH
			, A.MNU_KND
		FROM TBL_SYS_MNU_INF A
		INNER JOIN TBL_SYS_MNU_AUTH B
		ON (A.MNU_ID = B.MNU_ID AND B.AUTH_LV = #{AUTH_LV})
		WHERE A.USE_YN = 'Y'
		ORDER BY A.SORT_ORD
	</select>
	
	<select id="R_getUserInfo" parameterType="java.util.HashMap" resultType="java.util.HashMap">
		SELECT
			A.USR_CD
			, A.CENT_CD
			, SFTM_GET_CENT_NAME(A.CENT_CD) AS CENT_NM
			, A.TEAM_CD
			, SFTM_GET_TEAM_NAME(A.CENT_CD, A.TEAM_CD) AS TEAM_NM
			, A.AUTH_LV
			, A.USR_NM
			, B.CONN_IP
			, '10' AS PS_STA_CD
			, DATE_FORMAT(CURRENT_DATE(), '%Y%m%d') AS LOGIN_DT
			, A.ACT_STA_CD
			, A.USE_YN
			, (SELECT TP_CD FROM TBL_SYS_TEAM_INF WHERE TEAM_CD = A.TEAM_CD) AS TEAM_TP_CD
		FROM STT_TBL_USR A		
		LEFT OUTER JOIN TBL_SYS_LGN B
		ON (A.USR_CD = B.USR_CD)
		WHERE A.USR_CD = #{USR_CD}
	</select>
	
	<select id="R_getCentStndList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
		SELECT
			B.CENT_CD
			, A.STND_CD
			, A.STND_CD_NM
			, B.APY_YN
			, B.STND_VL
			, B.ETC1_CONT
			, B.ETC2_CONT
		FROM TBL_SYS_STND_SET_INF A
		LEFT OUTER JOIN TBL_SYS_CENT_SETVL_INF B
		ON (A.STND_CD = B.STND_CD AND B.CENT_CD = #{CENT_CD})
		WHERE A.USE_YN = 'Y'
	</select>
	
	<select id="R_getCommCode" parameterType="java.util.HashMap" resultType="java.util.HashMap">
		SELECT
			B.BIG_CD
			, B.MDL_CD
			, B.SML_CD AS CODE
			, B.SML_NM AS CODE_NM
		FROM STT_TBL_CMN_CD_BIG A
		INNER JOIN STT_TBL_CMN_CD_SML B
		ON (A.BIG_CD = B.BIG_CD AND A.MDL_CD = B.MDL_CD)
		WHERE A.USE_YN = 'Y'
		AND B.USE_YN = 'Y'
		ORDER BY A.BIG_CD, B.SORT_NO
	</select>
	
	<update id="U_addPwdErrCnt" parameterType="java.util.HashMap">
		UPDATE STT_TBL_USR_PWD
		SET PWD_ERR_CNT = PWD_ERR_CNT + 1
		WHERE USR_CD = #{USR_CD}
		AND REG_DTM = (
			SELECT MAX(REG_DTM) AS REG_DTM FROM STT_TBL_USR_PWD WHERE USR_CD = #{USR_CD}
		)
	</update>
	
	<update id="U_initPwdErrCnt" parameterType="java.util.HashMap">
		UPDATE STT_TBL_USR_PWD
		SET PWD_ERR_CNT = 0
		WHERE USR_CD = #{USR_CD}
		AND REG_DTM = (
			SELECT MAX(REG_DTM) AS REG_DTM FROM STT_TBL_USR_PWD WHERE USR_CD = #{USR_CD}
		)
	</update>
	
	<select id="R_getCentList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
		SELECT DISTINCT
			CENT_CD AS CODE
			, CENT_NM AS CODE_NM
			, BIZ_PSB_YN
			, #{AUTH_LV} AS AUTH_LV
		FROM TBL_SYS_CENT_INF
		WHERE USE_YN = 'Y'
		<if test="AUTH_LV != '1'.toString()">
			AND CENT_CD = #{CENT_CD}
		</if>
	</select>
		
	<select id="R_getTeamList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
		SELECT DISTINCT
			CENT_CD AS CENT_CD
			, TEAM_CD AS CODE
			, TEAM_NM AS CODE_NM
			, TP_CD
		FROM TBL_SYS_TEAM_INF
		WHERE USE_YN = 'Y'
		<if test="AUTH_LV == '4'.toString() or AUTH_LV == '5'.toString()">
			AND TEAM_CD = #{TEAM_CD}
		</if>
		<if test="AUTH_LV != '1'.toString() and (AUTH_LV != '4'.toString() or AUTH_LV != '5'.toString())">
			AND TEAM_CD IN (SELECT TEAM_CD FROM TBL_SYS_TEAM_INF WHERE CENT_CD = #{CENT_CD})
		</if>
	</select>
	
	<select id="R_getUserList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
		SELECT DISTINCT
			CENT_CD
			, TEAM_CD
			, USR_CD AS CODE
			, USR_NM AS CODE_NM
			, AUTH_LV
			, ACT_STA_CD
		FROM STT_TBL_USR
		WHERE USE_YN = 'Y'
		<if test="AUTH_LV == '4'.toString()">
			AND USR_CD = #{USR_CD}
		</if>
		<if test="AUTH_LV == '6'.toString()">
			AND USR_CD IN (SELECT USR_CD FROM STT_TBL_USR WHERE CENT_CD = #{CENT_CD} AND TEAM_CD = #{TEAM_CD})
		</if>
		<if test="AUTH_LV != '1'.toString() and (AUTH_LV != '4'.toString()) and AUTH_LV != '6'.toString()">
			AND USR_CD IN (SELECT USR_CD FROM STT_TBL_USR WHERE CENT_CD = #{CENT_CD})
		</if>
	</select>
	
	<select id="R_getMsgList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
		SELECT
			MSG_CD
			, MSG_CONT
		FROM TBL_SYS_CMN_MSG_CD
		WHERE USE_YN = 'Y'
	</select>
	
	<select id="R_chkCurUsrPwd" parameterType="java.util.HashMap" resultType="java.util.HashMap">
		SELECT
			CASE WHEN MAX(T.PWD) IS NULL THEN 'USR'
				 WHEN MAX(T.PWD) = #{CUR_PWD} THEN 'Y' 
				 ELSE 'N' 
			END AS MAT_YN
		FROM (
			SELECT B.PWD, ROW_NUMBER() OVER (ORDER BY B.REG_DTM DESC) AS RN
			FROM STT_TBL_USR A
			INNER JOIN STT_TBL_USR_PWD B
			ON (A.USR_CD = B.USR_CD)
			WHERE A.USR_CD = #{USR_CD}
		) T
		WHERE T.RN = 1
	</select>
	
	<select id="R_chkNewPwd" parameterType="java.util.HashMap" resultType="java.util.HashMap">
		SELECT
			CASE WHEN MAX(T.PWD) IS NULL THEN 'N' ELSE 'Y' END AS DUP_YN
		FROM (
			SELECT PWD
			FROM STT_TBL_USR_PWD
			WHERE USR_CD = #{USR_CD}
			AND REG_DTM <![CDATA[>]]> PERIOD_ADD(NOW(), -6)
		) T
		WHERE T.PWD = #{NEW_PWD}
	</select>
	
	<insert id="C_addUsrPwd" parameterType="java.util.HashMap">
		INSERT INTO STT_TBL_USR_PWD (
			USR_CD
			, PWD
			, PWD_ERR_CNT
			, REG_DTM
			, REG_ID
		) VALUES (
			#{USR_CD}
			, #{NEW_PWD}
			, 0
			, CURRENT_TIMESTAMP()
			, #{USR_CD}
		)
	</insert>
	
	<select id="R_getUserListTEST" parameterType="java.util.HashMap" resultType="java.util.HashMap">
		<include refid="CMM.PAGING_HEAD"/>
		SELECT
			CENT_CD, TEAM_CD, USR_CD, USR_NM AS ENC_USR_NM, AUTH_LV, BIZ_PSB_YN, USE_YN
		FROM TBL_TMP_TEST
		ORDER BY CENT_CD, USR_CD
		<include refid="CMM.PAGING_TAIL"/>
	</select>
	
	<update id="U_handleTEST" parameterType="java.util.HashMap">
		UPDATE TBL_TMP_TEST
		SET USR_NM = #{ENC_USR_NM}
			, AUTH_LV = #{AUTH_LV}
			, BIZ_PSB_YN = #{BIZ_PSB_YN}
			, USE_YN = #{USE_YN}
		WHERE USR_CD = #{USR_CD}
	</update>
	<insert id="C_handleTEST" parameterType="java.util.HashMap">
		INSERT INTO TBL_TMP_TEST (
			CENT_CD, TEAM_CD, USR_CD, USR_NM, AUTH_LV, BIZ_PSB_YN, USE_YN
		) VALUES (
			#{CENT_CD}, #{TEAM_CD}, #{USR_CD}, #{ENC_USR_NM}, #{AUTH_LV}, #{BIZ_PSB_YN}, #{USE_YN}
		)
	</insert>
	<delete id="D_handleTEST" parameterType="java.util.HashMap">
		DELETE FROM TBL_TMP_TEST
		WHERE USR_CD = #{ORG_USR_CD}
	</delete>
	
	<select id="R_getUserListTESTCnt" parameterType="java.util.HashMap" resultType="java.util.HashMap">
		SELECT COUNT(1) AS CNT
		FROM TBL_TMP_TEST
	</select>
	
	
	<!-- 서버 리스트 -->
	<select id="R_getSrvList" parameterType="java.util.HashMap" resultType="java.util.HashMap">		
		SELECT 
			A.NAME
			, A.VALUE            
		FROM 
			(
				SELECT 
					SV_NM AS "NAME"
					, SV_NM AS "VALUE" 
			 	FROM STT_TBL_SERVER_LIST) A
        ORDER BY A.NAME
	</select>	
		
	<!-- 서버 작업 통계 -->	
	<select id="R_getSrvJobStatistic" parameterType="java.util.HashMap" resultType="java.util.HashMap">
	    SELECT 
	        JOB_TP 
	        ,IFNULL(SUM(TOTAL_CNT),0) AS TOTAL_CNT
	        ,IFNULL(SUM(FILE_LENGTH),0) AS FILE_LENGTH
	        ,IFNULL(ROUND(SUM(FILE_SIZE / 1024.0 / 1024.0),2),0) AS FILE_SIZE
	        ,IFNULL(SUM(SUCC_CNT),0) AS SUCC_CNT
	        ,IFNULL(SUM(FAIL_CNT),0) AS FAIL_CNT
	        ,IFNULL(ROUND(SUM(SUCC_CNT)/SUM(TOTAL_CNT)*100,2),0) AS SUCC_CNT_PERCENTAGE
	        ,IFNULL(ROUND(SUM(FAIL_CNT)/SUM(TOTAL_CNT)*100,2),0) AS FAIL_CNT_PERCENTAGE    
	    FROM STT_TBL_JOB_STATISTIC_DAILY
	    GROUP BY JOB_TP
	    UNION 
	    SELECT 
	        "ALL"
	        JOB_TP 
	        ,IFNULL(SUM(TOTAL_CNT),0) AS TOTAL_CNT
	        ,IFNULL(SUM(FILE_LENGTH),0) AS FILE_LENGTH
	        ,IFNULL(ROUND(SUM(FILE_SIZE / 1024.0 / 1024.0),2),0) AS FILE_SIZE
	        ,IFNULL(SUM(SUCC_CNT),0) AS SUCC_CNT
	        ,IFNULL(SUM(FAIL_CNT),0) AS FAIL_CNT
	        ,IFNULL(ROUND(SUM(SUCC_CNT)/SUM(TOTAL_CNT)*100,2),0) AS SUCC_CNT_PERCENTAGE
	        ,IFNULL(ROUND(SUM(FAIL_CNT)/SUM(TOTAL_CNT)*100,2),0) AS FAIL_CNT_PERCENTAGE    
	    FROM STT_TBL_JOB_STATISTIC_DAILY
	</select>
	
	<!-- 서버 일일 자원 통계 -->
	<select id="R_getSrvResourceStatisticDaily" parameterType="java.util.HashMap" resultType="java.util.HashMap">		
		SELECT 
			N.SV_NM, DATE_FORMAT(N.REG_DTM, '%H:%i:%s') AS REG_DTM, N.CPU, N.MEM, N.IO, N.DISK, N.SWAP
			, MAC.CPU AS MAX_CPU, DATE_FORMAT(MAC.REG_DTM, '%H:%i:%s') AS MAX_CPU_REG_DTM
			, MIC.CPU AS MIN_CPU, DATE_FORMAT(MIC.REG_DTM, '%H:%i:%s') AS MIN_CPU_REG_DTM
			, MAM.MEM AS MAX_MEM, DATE_FORMAT(MAM.REG_DTM, '%H:%i:%s') AS MAX_MEM_REG_DTM
			, MIM.MEM AS MIN_MEM, DATE_FORMAT(MIM.REG_DTM, '%H:%i:%s') AS MIN_MEM_REG_DTM
		FROM 
			STT_TBL_RES_STATISTIC_DAILY N
			JOIN (SELECT SV_NM, CPU, REG_DTM FROM ( 
				SELECT SV_NM, CPU, REG_DTM FROM STT_TBL_RES_STATISTIC_DAILY WHERE (SV_NM, CPU) IN (SELECT SV_NM, MAX(CPU) AS CPU FROM STT_TBL_RES_STATISTIC_DAILY GROUP BY SV_NM ORDER BY SV_NM, REG_DTM DESC)
			) A GROUP BY SV_NM) MAC
			ON N.SV_NM = MAC.SV_NM
			JOIN (SELECT SV_NM, CPU, REG_DTM FROM ( 
				SELECT SV_NM, CPU, REG_DTM FROM STT_TBL_RES_STATISTIC_DAILY WHERE (SV_NM, CPU) IN (SELECT SV_NM, MIN(CPU) AS CPU FROM STT_TBL_RES_STATISTIC_DAILY GROUP BY SV_NM ORDER BY SV_NM, REG_DTM DESC)
			) A GROUP BY SV_NM) MIC
			ON N.SV_NM = MIC.SV_NM
			JOIN (SELECT SV_NM, MEM, REG_DTM FROM ( 
				SELECT SV_NM, MEM, REG_DTM FROM STT_TBL_RES_STATISTIC_DAILY WHERE (SV_NM, MEM) IN (SELECT SV_NM, MAX(MEM) AS MEM FROM STT_TBL_RES_STATISTIC_DAILY GROUP BY SV_NM ORDER BY SV_NM, REG_DTM DESC)
			) A GROUP BY SV_NM) MAM
			ON N.SV_NM = MAM.SV_NM
			JOIN (SELECT SV_NM, MEM, REG_DTM FROM ( 
				SELECT SV_NM, MEM, REG_DTM FROM STT_TBL_RES_STATISTIC_DAILY WHERE (SV_NM, MEM) IN (SELECT SV_NM, MIN(MEM) AS MEM FROM STT_TBL_RES_STATISTIC_DAILY GROUP BY SV_NM ORDER BY SV_NM, REG_DTM DESC)
			) A GROUP BY SV_NM) MIM
			ON N.SV_NM = MIM.SV_NM
		WHERE N.REG_DTM IN (select max(REG_DTM) from STT_TBL_RES_STATISTIC_DAILY GROUP BY SV_NM) AND N.SV_NM = #{SV_NM}
		GROUP BY N.SV_NM
		ORDER BY N.SV_NM
	</select>	
	
	<select id="R_getSrvJobStatisticDaily" parameterType="java.util.HashMap" resultType="java.util.HashMap">
		SELECT 
			A.*
		FROM
			( SELECT
				*
          	  FROM STT_TBL_JOB_STATISTIC_DAILY 
        	  WHERE SUBSTR(REG_TIME, 1, 10) = DATE_FORMAT(NOW(), '%Y-%m-%d %H:%i:%S')
        	  ORDER BY SV_NM , REG_TIME DESC
        	) A
	</select> 
	
	<select id="R_getSrvAllJobStatisticDaily" parameterType="java.util.HashMap" resultType="java.util.HashMap">
		SELECT 
			 B.CENT_NM AS SV_NM
			 , GROUP_CONCAT(T.TIMELINE ORDER BY T.REG_TIME SEPARATOR ',')  AS TIMELINE
		FROM
			(
				SELECT 
					A.SV_NM
					, A.REG_TIME
					, CONCAT(SUBSTR(A.REG_TIME, 12) , ':' , A.TOTAL_CNT) AS TIMELINE
				FROM (
					SELECT
						REG_TIME
						, SV_NM
						, SUM(TOTAL_CNT) AS TOTAL_CNT
					FROM STT_TBL_JOB_STATISTIC_DAILY
					WHERE SV_NM != 'DEFAULT' GROUP BY REG_TIME, SV_NM
				) A
			) T                
		INNER JOIN STT_TBL_SERVER_LIST B
        ON ( B.SV_NM = T.SV_NM )
		GROUP BY B.CENT_NM
	</select>
</mapper>