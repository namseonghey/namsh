<?xml version="1.0" encoding="EUC-KR"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="SYS">		
	
	
	<!-- 타겟 키워드 조회 -->
	<select id="R_getSnroKeywordTarget" parameterType="java.util.HashMap" resultType="java.util.HashMap">
		SELECT  KEYWORD
		      , SELECT_TARGET
		FROM    TBL_SNRO_KEYWORD_SCO
		WHERE   SNRO_CD = #{SNRO_CD}
	</select>
	
	<!-- 타겟 시나리오 프로세스 조회 -->
	<select id="R_getTargetSnro" parameterType="java.util.HashMap" resultType="java.util.HashMap">
		SELECT  *
		FROM    TBL_SNRO_MNG
		WHERE   SNRO_CD = #{SNRO_CD}
	</select>

	<!-- 고객 시나리오 프로세스 등록 -->
	<insert id="C_setCusProcessInfo" parameterType="java.util.HashMap">
		INSERT INTO TBL_SNRO_CUS_PROCESS (
			PH_NUMBER
		  , STEP
		  , STT
		  , SNRO_CD
		  , PROCESS_CD
		  , RTN_TTS_CD
		  , RTN_TTS_TEXT
		  , REG_DTM
		  , ERR_CODE
		  , ERR_MESSAGE
		  , NEXT
		  , TRY_CNT
		  , STT_DATE
		  , TTS_NM
		  , TTS_NB
		) VALUES (
			#{PH_NUMBER}
		  , #{STEP}
		  , #{STT}
		  , #{SNRO_CD}
		  , #{PROCESS_CD}
		  , #{RTN_TTS_CD}
		  , #{RTN_TTS_TEXT}
		  , DATE_FORMAT(NOW(), '%Y-%m-%d %H:%i:%s')
		  , #{ERR_CODE}
		  , #{ERR_MESSAGE}
		  , #{NEXT}
		  , #{TRY_CNT}
		  , #{STT_DATE}
		  , #{TTS_NM}
		  , #{TTS_NB}
		)
	</insert>
	
	<!-- 고객 시나리오 다음 프로세스 조회 -->
	<select id="R_getNextSnroProcess" parameterType="java.util.HashMap" resultType="java.util.HashMap">
		SELECT  *
		FROM    TBL_SNRO_PROCESS
		WHERE   SNRO_CD = #{SNRO_CD}
		AND     SORT_ORD = #{SORT_ORD} 
	</select>

	<!-- 고객 시나리오 프로세스 조회 -->
	<select id="R_getCusProcessInfo" parameterType="java.util.HashMap" resultType="java.util.HashMap">
		SELECT PH_NUMBER
		     , STEP
		     , STT
		     , SNRO_CD
		     , PROCESS_CD
		     , RTN_TTS_CD
		     , RTN_TTS_TEXT
		     , REG_DTM
		     , ERR_CODE
		     , ERR_MESSAGE 	
		     , TRY_CNT
		     , NEXT
		     , STT_DATE
		     , TTS_NM
		     , TTS_NB
		FROM   TBL_SNRO_CUS_PROCESS
		WHERE  PH_NUMBER = #{PH_NUMBER}
		ORDER BY REG_DTM DESC LIMIT 1		
	</select>
	
	<!-- 시나리오 인터페이스 조회 -->
	<select id="R_getInterList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
		SELECT ITF_CD
		     , ITF_NM
		     , URL  	
		FROM   TBL_SNRO_INTERFACE
		ORDER BY ITF_CD
	</select>
	
	<!-- 시나리오 프로세스 조회 -->
	<select id="R_getSnroProcess" parameterType="java.util.HashMap" resultType="java.util.HashMap">
		SELECT  P.SNRO_CD 
			  , P.PROCESS_TP 
			  , P.PROCESS_CD 
			  , P.SUCCESS
			  , P.SUCCESS_TTS
			  , (SELECT SNRO_TTS_EXPL FROM TBL_SNRO_TTS_INFO WHERE P.SUCCESS_TTS = SNRO_TTS_CD) AS SUCCESS_NM
			  , P.FAIL
			  , P.FAIL_TTS
			  , (SELECT SNRO_TTS_EXPL FROM TBL_SNRO_TTS_INFO WHERE P.FAIL_TTS = SNRO_TTS_CD) AS FAIL_NM
			  , P.SORT_ORD 
			  , IFNULL(M.SNRO_EXPL, I.ITF_NM) AS SNRO_EXPL
			  , M.REQ_SCO
			  , P.RTN_TARGET
		FROM    TBL_SNRO_PROCESS P
		LEFT OUTER JOIN TBL_SNRO_MNG M
		<if test="SNRO_CD == null or SNRO_CD == ''">
		ON      P.SNRO_CD = M.SNRO_CD
		</if>		
		<if test="SNRO_CD != null and SNRO_CD != ''">
		ON      P.PROCESS_CD = M.SNRO_CD		
		</if>		
		LEFT OUTER JOIN TBL_SNRO_INTERFACE I
		ON      P.PROCESS_CD = I.ITF_CD
		<if test="SNRO_CD == null or SNRO_CD == ''">
		WHERE   P.PROCESS_TP = 'INIT'
		AND     P.SUCCESS   != ''
		</if>
		<if test="SNRO_CD != null and SNRO_CD != ''">
		WHERE   P.SNRO_CD    = #{SNRO_CD}
		</if>	
		ORDER BY P.SORT_ORD 
	</select>	
	
	<!-- 시나리오 1 LEVEL 프로세스 조회 -->
	<select id="R_getSnroInitProcess" parameterType="java.util.HashMap" resultType="java.util.HashMap">
		SELECT P.SNRO_CD
			 , P.PROCESS_TP
			 , '고객 발화 검출' AS PROCESS_TP_NM
			 , M.SNRO_EXPL
			 , 'fileFolder' AS PROCESS
			 , M.REQ_SCO
		FROM   TBL_SNRO_PROCESS P
		     , TBL_SNRO_MNG M
		WHERE  P.PROCESS_TP = 'INIT'
		AND    P.SNRO_CD   = M.SNRO_CD
		ORDER BY SNRO_CD
	</select>	
		
	<!-- 시나리오 TTS 조회 -->
	<select id="R_getSnroTtsList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
		SELECT SNRO_TTS_CD
		     , SNRO_TTS_TEXT
		     , SNRO_TTS_EXPL
		     , USE_YN	  
		     , SNRO_TTS_TP	
		FROM   TBL_SNRO_TTS_INFO
		ORDER BY SNRO_TTS_CD
	</select>
	
	<!-- 시나리오 키워드 조회 -->
	<select id="R_getSnroKeyword" parameterType="java.util.HashMap" resultType="java.util.HashMap">
		SELECT SNRO_CD
		     , KEYWORD
		     , SCO
		     , USE_YN	  	
		FROM   TBL_SNRO_KEYWORD_SCO
		WHERE  SNRO_CD = #{SNRO_CD}
		ORDER BY SCO DESC
	</select>
	
	<!-- 시나리오 조회 -->
	<select id="R_getSnroList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
		SELECT SNRO_CD
		     , SNRO_EXPL
		     , TYPE_FLAG
		     , REQ_SCO	
		     , 'fileFolder' AS KEYWORD 	
		     , USE_YN	  	
		FROM   TBL_SNRO_MNG		
		<if test="SNRO_CD != null and SNRO_CD != ''">
		WHERE   SNRO_CD    = #{SNRO_CD}
		</if>
		ORDER BY SNRO_CD
	</select>
	

	<!-- 대분류 코드 조회 -->
	<select id="R_getBigCdList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
		SELECT BIG_CD
		     , BIG_NM
		     , MDL_CD
		     , MDL_NM
		     , USE_YN			
		FROM   STT_TBL_CMN_CD_BIG B
		<where>
			<if test="BIG_CD_NM != ''">
		       (BIG_CD LIKE '%${BIG_CD_NM}%' OR BIG_NM LIKE '%${BIG_CD_NM}%')
			</if>
			<if test="USE_YN != ''">
		AND    USE_YN = #{USE_YN}
			</if>
		</where>
		ORDER BY BIG_CD
	</select>
	
	<!-- 소분류 코드 조회 -->
	<select id="R_getSmlCdList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
		SELECT BIG_CD
		     , MDL_CD
		     , SML_CD
		     , SML_NM
		     , CD_DV
		     , SORT_NO
		     , USE_YN			
		FROM   STT_TBL_CMN_CD_SML S
		WHERE  BIG_CD = #{BIG_CD}
		AND    MDL_CD = #{MDL_CD}
		ORDER BY SORT_NO, SML_CD
	</select>
	
	<!-- 대분류 코드 수정 -->
	<update id="U_handleBigCdList" parameterType="java.util.HashMap">
		UPDATE STT_TBL_CMN_CD_BIG
		SET    BIG_NM  = #{BIG_NM}
		     , MDL_CD  = #{MDL_CD}
		     , MDL_NM  = #{MDL_NM}
             , USE_YN  = #{USE_YN}
             , CHG_DTM = DATE_FORMAT(NOW(), '%Y-%m-%d %H:%i:%s')
		WHERE  BIG_CD  = #{BIG_CD}
		AND    MDL_CD = #{MDL_CD}
	</update>
	
	<!-- 대분류 코드 추가 -->
	<insert id="C_handleBigCdList" parameterType="java.util.HashMap">
		INSERT INTO STT_TBL_CMN_CD_BIG (
			BIG_CD
		  , BIG_NM
		  , MDL_CD
		  , MDL_NM
		  , USE_YN
		  , CHG_DTM
		) VALUES (
			#{BIG_CD}
		  , #{BIG_NM}
		  , #{MDL_CD}
		  , #{MDL_NM}
		  , #{USE_YN}
		  , DATE_FORMAT(NOW(), '%Y-%m-%d %H:%i:%s')
		)
	</insert>
	
	<!-- 소분류 코드 수정 -->
	<update id="U_handleSmlCdList" parameterType="java.util.HashMap">
		UPDATE STT_TBL_CMN_CD_SML
		SET    SML_NM  = #{SML_NM}
			 , CD_DV   = #{CD_DV}
             , USE_YN  = #{USE_YN}
             , SORT_NO = #{SORT_NO}
             , CHG_DTM = DATE_FORMAT(NOW(), '%Y-%m-%d %H:%i:%s')
		WHERE  BIG_CD  = #{BIG_CD}
		AND    MDL_CD  = #{MDL_CD}
		AND    SML_CD  = #{SML_CD}
	</update>
	
	<!-- 소분류 코드 추가 -->
	<insert id="C_handleSmlCdList" parameterType="java.util.HashMap">
		INSERT INTO STT_TBL_CMN_CD_SML (
			BIG_CD
		  , SML_CD
		  , SML_NM
		  , MDL_CD 
		  , CD_DV  
		  , SORT_NO
		  , USE_YN
		  , CHG_DTM
		) VALUES (
			#{BIG_CD}
		  , #{SML_CD}
		  , #{SML_NM}
		  , #{MDL_CD}
		  , #{CD_DV}
		  , #{SORT_NO}
		  , #{USE_YN}
		  , DATE_FORMAT(NOW(), '%Y-%m-%d %H:%i:%s')
		)
	</insert>
	
	<!-- 사용자 조회 -->
	<select id="R_getUserList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
		<include refid="CMM.PAGING_HEAD"/>
		SELECT	A.USR_CD
			,	A.USR_NM
			,	A.AUTH_LV
			,	SFTM_GET_CODE_NAME('AUTH_LV', A.AUTH_LV) AS AUTH_LV_NM
			,	A.REG_ID
			,	DATE_FORMAT(A.REG_DTM, '%Y-%m-%d %H:%i:%s') AS REG_DTM
			,	A.CHG_ID
			,	A.CHG_DTM
			,	A.CENT_CD
			,	A.TEAM_CD
			,	SFTM_GET_CENT_NAME(A.CENT_CD) AS CENT_NM
			,	SFTM_GET_TEAM_NAME(A.CENT_CD, A.TEAM_CD) AS TEAM_NM
			,	A.ACT_STA_CD
			,	IFNULL(SFTM_GET_CODE_NAME('ACT_STA_CD', A.ACT_STA_CD), '미활동') AS ACT_STA_NM
			,	A.USE_YN
			,	IFNULL(SFTM_GET_CODE_NAME('USE_YN', A.USE_YN), '미사용') AS USE_YN_NM
		FROM	STT_TBL_USR A
		WHERE 1=1
		<if test="CENT_CD != null and CENT_CD != ''">
			AND A.CENT_CD = #{CENT_CD}
		</if>
		<if test="TEAM_CD != null and TEAM_CD != ''">
			AND A.TEAM_CD = #{TEAM_CD}
		</if>
		<if test="AUTH_LV != null and AUTH_LV != ''">
			AND A.AUTH_LV = #{AUTH_LV}
		</if>
		<if test="SRCH_DV != '' and SRCH_DV == 'NM' and SRCH_VALUE != ''">
			AND A.USR_NM LIKE CONCAT(#{SRCH_VALUE},'%')
		</if>
		<if test="SRCH_DV != '' and SRCH_DV == 'ID' and SRCH_VALUE != ''">
			AND A.USR_CD LIKE CONCAT(#{SRCH_VALUE},'%')
		</if>
		ORDER BY A.CENT_CD, A.TEAM_CD, A.USR_NM
		<include refid="CMM.PAGING_TAIL"/>
	</select>
	
	<!-- 초기 비밀번호 기준값 조회 -->
	<select id="R_PwdStndCode" parameterType="java.util.HashMap" resultType="java.util.HashMap">
		SELECT STND_VL, APY_YN
		FROM	TBL_SYS_CENT_SETVL_INF
		WHERE	CENT_CD = #{CENT_CD}
		AND		STND_CD = #{STND_CD}
		ORDER BY STND_CD
	</select>
	
	<!-- 사용자 정보를 select 후에 사용자 정보 이력 쌓기 -->
	<insert id="C_setUserInfoSp" parameterType="java.util.HashMap">
		INSERT INTO STT_TBL_USR_SP (USR_CD, CHG_DTM, CENT_CD, TEAM_CD, USR_NM, AUTH_LV, REG_ID, REG_DTM, CHG_ID, ACT_STA_CD, USE_YN)
		SELECT USR_CD, CURRENT_TIMESTAMP() AS CHG_DTM, CENT_CD, TEAM_CD, USR_NM, AUTH_LV, REG_ID, REG_DTM, CHG_ID, ACT_STA_CD, USE_YN
		FROM STT_TBL_USR
		WHERE USR_CD = #{USR_CD}
	</insert>
	
	<!-- 사용자 정보 merge -->
	<update id="U_mergeUserInfo" parameterType="java.util.HashMap">
		INSERT INTO STT_TBL_USR (
				USR_CD
			,	USR_NM
			,	AUTH_LV
			,	REG_ID
			,	REG_DTM
			,	CHG_ID
			,	CHG_DTM
			,	CENT_CD
			,	TEAM_CD
			,	ACT_STA_CD 
			,	USE_YN	
		) VALUES (
				#{USR_CD}
			,	#{USR_NM}
			,	#{AUTH_LV}
			,	#{REG_ID}
			,	CURRENT_TIMESTAMP()
			,	#{CHG_ID}
			,	CURRENT_TIMESTAMP()
			,	#{CENT_CD}
			,	#{TEAM_CD}
			,	#{ACT_STA_CD} 
			,	#{USE_YN}
		)
		ON DUPLICATE KEY
		UPDATE 
				USR_NM 		= #{USR_NM}
			,	AUTH_LV		= #{AUTH_LV}
			,	CENT_CD		= #{CENT_CD}
			,	TEAM_CD		= #{TEAM_CD}
			,	ACT_STA_CD	= #{ACT_STA_CD}
			,	USE_YN		= #{USE_YN}
			,	CHG_ID		= #{CHG_ID}
			,	CHG_DTM		= CURRENT_TIMESTAMP()		
	</update>
	
	<!-- 사용자 정보 비밀번호 등록 -->	 
	<insert id="C_PwdInit" parameterType="java.util.HashMap">
		INSERT INTO STT_TBL_USR_PWD(
				USR_CD
			,	PWD
			,	REG_ID
			,	REG_DTM
			,	PWD_ERR_CNT
			,	INI_PWD_YN
		)VALUES( 
				#{USR_CD}
			,	#{INIT_PWD} 
			,	#{REG_ID}	
			,	CURRENT_TIMESTAMP()
			,	0
			,	'Y'
		)
	</insert>
	
	<!-- 사용자 정보 로그인 초기화 -->
	<delete id="D_LoginInfo" parameterType="java.util.HashMap">
		DELETE 
		FROM TBL_SYS_LGN
		WHERE CONN_IP = ( SELECT A.CONN_IP
						FROM TBL_SYS_LGN A
						WHERE A.USR_CD = #{USR_CD} )
		AND USR_CD = #{USR_CD}
	</delete>
	
	<!-- 사용자코드 중복 체크	-->
	<select id="R_getUserCdCheck" parameterType="java.util.HashMap" resultType="java.util.HashMap">
		SELECT	COUNT(USR_CD) AS CHK_CNT
		FROM	STT_TBL_USR
		WHERE 	USR_CD = #{USR_CD}
	</select>
	
	<!-- 사용자이름 중복 체크	-->
	<select id="R_getUserNmCheck" parameterType="java.util.HashMap" resultType="java.util.HashMap">
		SELECT	COUNT(USR_NM) AS CHK_CNT
		FROM	STT_TBL_USR
		WHERE	USR_NM = #{USR_NM}
		<if test="USR_CD != ''">
		AND NOT USR_CD = #{USR_CD}
	 	</if>
	</select>
	
	<!-- 메뉴관리 코드 조회 -->
	<select id="R_getMenuList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
		SELECT 
			A.MNU_ID
			, A.MNU_NM
			, A.PARE_MNU_ID
			, A.MNU_KND
			, A.PGM_PATH
			, A.SORT_ORD
			, A.USE_YN
			, IFNULL(SUBSTR(A.PARE_MNU_ID,1,3), SUBSTR(A.MNU_ID,1,3)) AS MNU_GROUP
			, IFNULL(B.SORT_ORD, A.SORT_ORD) AS GROUP_SORT
			, IFNULL(SUBSTR(A.MNU_ID,4,6), 0) AS MENU_LV
		FROM TBL_SYS_MNU_INF A
		LEFT OUTER JOIN TBL_SYS_MNU_INF B
		ON SUBSTR(A.PARE_MNU_ID,1,3) = B.MNU_ID
		WHERE 1=1
		<if test="MENU_ID != ''">
		AND A.MNU_ID LIKE CONCAT(#{MENU_ID},'%')
		</if>
		<if test="MENU_NM != ''">
		AND A.MNU_NM LIKE CONCAT(#{MENU_NM},'%')
		</if>
		<if test="MNU_KND != ''">
		AND A.MNU_KND = #{MNU_KND}
		</if>
		<if test="USE_YN != ''">
		AND A.USE_YN = #{USE_YN}
		</if>
		ORDER BY GROUP_SORT, MNU_GROUP, MENU_LV, A.SORT_ORD;
	</select>
	
	<!-- 메뉴관리 코드 수정 -->
	<update id="U_handleMenuList" parameterType="java.util.HashMap">
		UPDATE TBL_SYS_MNU_INF
		SET MNU_NM = #{MNU_NM}
			, PARE_MNU_ID = #{PARE_MNU_ID}
			, MNU_KND = #{MNU_KND}
			, PGM_PATH = #{PGM_PATH}
			, SORT_ORD = #{SORT_ORD}
			, USE_YN = #{USE_YN}
			, CHG_DTM = CURRENT_TIMESTAMP()
			, CHG_ID = #{G_USR_CD}
		WHERE MNU_ID = #{MNU_ID}
	</update>
	
	<!-- 메뉴관리 코드 추가 -->
	<insert id="C_handleMenuList" parameterType="java.util.HashMap">
		INSERT INTO TBL_SYS_MNU_INF (MNU_ID, MNU_NM, PARE_MNU_ID, MNU_KND, PGM_PATH, SORT_ORD, USE_YN, REG_DTM, REG_ID, CHG_DTM, CHG_ID) 
		VALUES (#{MNU_ID}, #{MNU_NM}, #{PARE_MNU_ID}, #{MNU_KND}, #{PGM_PATH}, #{SORT_ORD}, #{USE_YN}, CURRENT_TIMESTAMP(), #{G_USR_CD}, CURRENT_TIMESTAMP(), #{G_USR_CD})
	</insert>
	
	<!-- 메뉴관리 코드 삭제 -->
	<delete id="D_handleMenuList" parameterType="java.util.HashMap">
		DELETE FROM TBL_SYS_MNU_INF
		WHERE  MNU_ID = #{MNU_ID}
	</delete>
	
	<!-- 권한관리 - 권한목록 조회 -->
	<select id="R_getAuthList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
		SELECT S.SML_NM, S.SML_CD
		FROM STT_TBL_CMN_CD_BIG B RIGHT OUTER JOIN STT_TBL_CMN_CD_SML S
		ON B.BIG_CD = S.BIG_CD
		WHERE B.BIG_CD = 'AUTH_LV'
	</select>
	
	<!-- 권한관리 - 프로그램목록 조회 -->
	<select id="R_getPrgmList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
		SELECT
		CASE WHEN B.MNU_ID IN ( SELECT A.MNU_ID 
								FROM TBL_SYS_MNU_AUTH A
								WHERE AUTH_LV = #{AUTH_LV} ) THEN 'Y' ELSE 'N' 
		END AS CHK,		
		B.MNU_ID, B.PARE_MNU_ID, B.MNU_NM, SFTM_GET_CODE_NAME('MNU_KND', B.MNU_KND) AS MNU_KND_NM
		FROM TBL_SYS_MNU_INF B
		WHERE USE_YN = 'Y' AND B.MNU_KND IN ('10', '20')
	</select>
	
	<!-- 권한관리 - 프로그램목록 권한 수정① (프로그램목록 권한 추가, 삭제 후 수정) -->
	<delete id="D_handlePrgmList" parameterType="java.util.HashMap">
		DELETE
		FROM TBL_SYS_MNU_AUTH
		WHERE AUTH_LV = #{AUTH_LV}
	</delete>
	
	<!-- 권한관리 - 프로그램목록 권한 수정② (프로그램목록 권한 추가, 삭제 후 수정) -->
	<insert id="C_handlePrgmList" parameterType="java.util.HashMap">
		INSERT INTO TBL_SYS_MNU_AUTH (MNU_ID, AUTH_LV) 
		VALUES (#{MNU_ID}, #{AUTH_LV})
	</insert>
	
	<!-- 기준값관리 조회 -->
   <select id="R_getStndValInfo" parameterType="java.util.HashMap" resultType="java.util.HashMap">
      <include refid="CMM.PAGING_HEAD"/>
      SELECT
      			STND_CD
      		,	STND_CD_NM
         	,	USE_YN
         	,	APY_PTY_USE_YN
			,	CENT_USR_MFY_PSB_YN
			,	STND_VL_PTY_USE_YN
			,	ETC1_PTY_USE_YN
			,	ETC2_PTY_USE_YN
			,	SORT_ORD
			,	DATE_FORMAT(REG_DTM, '%Y-%m-%d') AS REG_DTM
      FROM TBL_SYS_STND_SET_INF 
      WHERE 1=1
      <if test="STND_CD_NAME != ''">
         AND  (STND_CD LIKE CONCAT ('%', #{STND_CD_NAME}, '%')
		 OR    STND_CD_NM LIKE CONCAT ('%', #{STND_CD_NAME}, '%'))
      </if>  
      <if test="USE_YN != ''">
		 AND USE_YN = #{USE_YN}
	 </if>
	  <if test="APY_PTY_USE_YN != ''">
		 AND APY_PTY_USE_YN = #{APY_PTY_USE_YN}
	 </if>
 	<if test="STND_VL_PTY_USE_YN != ''">
		 AND STND_VL_PTY_USE_YN = #{STND_VL_PTY_USE_YN}
	 </if>
      ORDER BY STND_CD DESC 
      <include refid="CMM.PAGING_TAIL"/> 
   </select>
   
   
   <!--  기준값 관리 수정 -->
	<update id="U_handleStndValInfo" parameterType="java.util.HashMap">
		UPDATE	TBL_SYS_STND_SET_INF
		SET		
				STND_CD_NM  = #{STND_CD_NM}
            ,	USE_YN  = #{USE_YN}
            ,	APY_PTY_USE_YN  = #{APY_PTY_USE_YN}
            ,	CENT_USR_MFY_PSB_YN  = #{CENT_USR_MFY_PSB_YN}
            ,	STND_VL_PTY_USE_YN  = #{STND_VL_PTY_USE_YN}
            , 	ETC1_PTY_USE_YN  = #{ETC1_PTY_USE_YN}
            , 	ETC2_PTY_USE_YN  = #{ETC2_PTY_USE_YN}
            , 	SORT_ORD  = #{SORT_ORD}
           	, 	CHG_DTM = CURRENT_TIMESTAMP()
           	,	CHG_ID = #{G_USR_CD}
		WHERE  STND_CD  = #{STND_CD}
	</update>
	
   
   <!--  기준값 관리 추가 -->
   <insert id="C_handleStndValInfo" parameterType="java.util.HashMap">
      INSERT INTO TBL_SYS_STND_SET_INF (
           		STND_CD
         	, 	STND_CD_NM
         	, 	USE_YN
         	,	APY_PTY_USE_YN
	        ,	CENT_USR_MFY_PSB_YN
	        , 	STND_VL_PTY_USE_YN
	        , 	ETC1_PTY_USE_YN
	        , 	ETC2_PTY_USE_YN
	        , 	SORT_ORD
	        ,	REG_ID
	        , 	REG_DTM
      ) VALUES (
        		#{STND_CD}
         	, 	#{STND_CD_NM}
         	, 	#{USE_YN}
         	, 	#{APY_PTY_USE_YN}
         	, 	#{CENT_USR_MFY_PSB_YN}
        	, 	#{STND_VL_PTY_USE_YN}
         	, 	#{ETC1_PTY_USE_YN}
         	, 	#{ETC2_PTY_USE_YN}
         	, 	#{SORT_ORD}
         	,	#{G_USR_CD}
         	, 	CURRENT_TIMESTAMP()
      )
   </insert>
   
   <!--  기준값관리  삭제 -->
   <delete id="D_handleStndValInfo" parameterType="java.util.HashMap" >
      DELETE   FROM TBL_SYS_STND_SET_INF    
      WHERE   STND_CD = #{STND_CD}
   </delete>


   <!-- 센터관리 : 센터 정보 조회 -->
   <select id="R_getCentList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
   	 	<include refid="CMM.PAGING_HEAD"/> 
		SELECT  CENT_CD
      		,	CENT_NM
      		,	BIZ_PSB_YN
      		,	USE_YN
      		,	DATE_FORMAT(REG_DTM, '%Y-%m-%d') AS REG_DTM
      	FROM TBL_SYS_CENT_INF C
      	WHERE 1=1 
      	<if test="CENT_CD_NAME != ''">
         AND  (CENT_CD LIKE CONCAT ('%', #{CENT_CD_NAME}, '%')
		 OR    CENT_NM LIKE CONCAT ('%', #{CENT_CD_NAME}, '%'))
     	 </if>  
		<if test="USE_YN != ''">
			AND USE_YN = #{USE_YN}
		</if>
		ORDER BY CENT_CD 
	 	<include refid="CMM.PAGING_TAIL"/>
   </select>
   
   <!-- 센터관리 : 팀 정보 조회 -->
   <select id="R_getTeamList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
  	<include refid="CMM.PAGING_HEAD"/> 
		SELECT	CENT_CD
			,	TEAM_CD AS TEAM_CD
      		,	TEAM_NM AS TEAM_NM
      		,	TP_CD AS TEAM_TP_CD 
      		,	USE_YN AS USE_YN
      		,	DATE_FORMAT(REG_DTM, '%Y-%m-%d ') AS REG_DTM
      	FROM TBL_SYS_TEAM_INF 
  		WHERE  CENT_CD = #{CENT_CD}
		ORDER BY TEAM_CD 
	<include refid="CMM.PAGING_TAIL"/>
   </select>
   
   <!-- 센터관리 : 기준값 정보 조회 -->
   <select id="R_dsCentStndValList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
  		<include refid="CMM.PAGING_HEAD"/> 
		SELECT
            TRIM(A.STND_CD) AS STND_CD
            , A.STND_CD_NM
            , B.CENT_CD AS CENT_CD
            , B.STND_VL    AS STND_VL
            , NVL(B.APY_YN, 'N') AS APY_YN
            , B.ETC1_CONT
            , B.ETC2_CONT
            , A.CENT_USR_MFY_PSB_YN AS CENT_USR_MFY_PSB_YN
            , A.STND_VL_PTY_USE_YN AS STND_VL_PTY_USE_YN
            , A.APY_PTY_USE_YN AS APY_PTY_USE_YN
            , A.ETC1_PTY_USE_YN AS ETC1_PTY_USE_YN
            , A.ETC2_PTY_USE_YN AS ETC2_PTY_USE_YN
		FROM
		    (
		    SELECT
		            STND_CD
		        ,   STND_CD_NM
		        ,   SORT_ORD
		        ,   CENT_USR_MFY_PSB_YN
		        ,   STND_VL_PTY_USE_YN
		        ,   ETC1_PTY_USE_YN
		        ,   ETC2_PTY_USE_YN
		        ,   APY_PTY_USE_YN
		    FROM
		        TBL_SYS_STND_SET_INF
		    WHERE USE_YN='Y'
		    ) A
		LEFT JOIN
		    (
		    SELECT
                    CENT_CD
                ,   STND_CD
                ,   STND_VL
                ,   APY_YN
                ,   ETC1_CONT
                ,   ETC2_CONT
		    FROM
		        TBL_SYS_CENT_SETVL_INF
		    WHERE
		        CENT_CD = #{CENT_CD}
		    ) B ON (A.STND_CD=B.STND_CD)
		ORDER BY
		    A.STND_CD
	<include refid="CMM.PAGING_TAIL"/> 
    </select>
   		
   
   <!--  센터 관리 : 센터 정보 수정 -->
	<update id="U_handleCentList" parameterType="java.util.HashMap">
		UPDATE TBL_SYS_CENT_INF
		SET    CENT_NM     = #{CENT_NM}
             , BIZ_PSB_YN  = #{BIZ_PSB_YN}
             , USE_YN      = #{USE_YN}
           	 , CHG_DTM     = CURRENT_TIMESTAMP()
           	 , CHG_ID      = #{G_USR_CD}
		WHERE  CENT_CD     = #{CENT_CD}
	</update>
	
   
   <!--   센터 관리 : 센터 정보 추가 -->
   <insert id="C_handleCentList" parameterType="java.util.HashMap">
      INSERT INTO TBL_SYS_CENT_INF (
      			CENT_CD
         	,	CENT_NM
         	, 	BIZ_PSB_YN
         	, 	USE_YN
         	, 	REG_ID
         	, 	REG_DTM
      ) VALUES (
         		#{CENT_CD}
         	, 	#{CENT_NM}
         	, 	#{BIZ_PSB_YN}
         	, 	#{USE_YN}
         	,   #{G_USR_CD}
         	, 	NOW()
       <!-- TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') -->
      )
   </insert>
   
   <!--    센터 관리 : 센터 정보  삭제 -->
   <delete id="D_handleCentList" parameterType="java.util.HashMap" >
      DELETE  FROM TBL_SYS_CENT_INF    
      WHERE   CENT_CD=#{CENT_CD}
   </delete>
   
      <!--  센터 관리 : 팀 정보 수정 -->
	<update id="U_handleTeamList" parameterType="java.util.HashMap">
		UPDATE TBL_SYS_TEAM_INF
		SET    TEAM_NM = #{TEAM_NM}
             , USE_YN  = #{USE_YN}
             , TP_CD   = #{TEAM_TP_CD}
           	 , CHG_DTM = NOW()
           	 , CHG_ID  = #{G_USR_CD}
		WHERE  CENT_CD = #{CENT_CD}  	
		AND    TEAM_CD = #{TEAM_CD}
	</update>
	
   
   <!--   센터 관리 : 팀 정보 추가 -->
   <insert id="C_handleTeamList" parameterType="java.util.HashMap">
      INSERT INTO TBL_SYS_TEAM_INF (
      			CENT_CD
           	,	TEAM_CD
         	, 	TEAM_NM
         	,	TP_CD
         	, 	USE_YN
         	, 	REG_ID
         	, 	REG_DTM
      ) VALUES (
      			#{CENT_CD}
         	,	#{TEAM_CD}
         	, 	#{TEAM_NM}
         	,	#{TP_CD}
         	, 	#{USE_YN}
         	, 	#{G_USR_CD}
         	, 	NOW()
      )
   </insert>
   
   <!--    센터 관리 : 팀 정보  삭제 -->
   <delete id="D_handleTeamList" parameterType="java.util.HashMap" >
      DELETE  FROM TBL_SYS_TEAM_INF    
      WHERE   TEAM_CD = #{TEAM_CD}
   </delete>
   
   
   
    <!--  센터 관리 : 기준값 정보 수정 -->
	<update id="U_updateStndValList" parameterType="java.util.HashMap">
		INSERT INTO TBL_SYS_CENT_SETVL_INF 	(
				CENT_CD
			,	STND_CD
			,	STND_VL
			,	APY_YN
			,   ETC1_CONT
            ,   ETC2_CONT
         	, 	REG_ID
         	, 	REG_DTM
		) VALUES (
				#{CENT_CD}
			,	#{STND_CD}
			,	#{STND_VL}
			,	#{APY_YN}
			,   #{ETC1_CONT}
            ,   #{ETC2_CONT}
         	, 	#{G_USR_CD}
         	, 	NOW()
		)
		ON DUPLICATE KEY
		UPDATE 
		    	STND_VL  = #{STND_VL}	
			, 	APY_YN  = #{APY_YN}
			,	ETC1_CONT=#{ETC1_CONT}
			,	ETC2_CONT=#{ETC2_CONT}
			, 	CHG_DTM = NOW()
			,	CHG_ID = #{G_USR_CD}	
	</update>
	
	
 
 <!-- 메시지 관리 : 조회-->
   <select id="R_getMsgCdList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
	 <include refid="CMM.PAGING_HEAD"/>
		SELECT	MSG_CD AS MSG_CD
			,	MSG_CONT AS MSG_CONT	
      		,	USE_YN AS USE_YN
      		,	REG_ID AS REG_ID
      		,	DATE_FORMAT(REG_DTM, '%Y-%m-%d %H:%i:%s') AS REG_DTM
      	FROM TBL_SYS_CMN_MSG_CD
  		WHERE  1=1
  		<if test="MSG_CD_NAME != '' ">
  		AND (MSG_CD LIKE CONCAT('%',#{MSG_CD_NAME},'%')
  		OR 	MSG_CONT LIKE CONCAT('%',#{MSG_CD_NAME},'%'))
  		</if>	
  		<if test= "USE_YN !=''">
  		AND USE_YN = #{USE_YN}
  		</if>
		ORDER BY MSG_CD 
	<include refid="CMM.PAGING_TAIL"/>
   </select>
    
   <!-- 메시지 관리 : 저장 -->
   <insert id="C_handleMsgCdList" parameterType="java.util.HashMap">
      INSERT INTO TBL_SYS_CMN_MSG_CD (
      			MSG_CD
           	,	MSG_CONT
         	, 	USE_YN
         	,	REG_ID
         	,	REG_DTM
      ) VALUES (
      			#{MSG_CD}
         	,	#{MSG_CONT}
         	, 	#{USE_YN}
         	,	#{G_USR_CD}
         	,	CURRENT_TIMESTAMP()
      )
      ON DUPLICATE KEY 
      UPDATE 
      		MSG_CD =#{MSG_CD}
   </insert>
   
       <!-- 메시지 관리 : 수정 -->
	<update id="U_handleMsgCdList" parameterType="java.util.HashMap">
		UPDATE TBL_SYS_CMN_MSG_CD
		SET     MSG_CONT  = #{MSG_CONT}
             , 	USE_YN  = #{USE_YN}
           	 , 	CHG_DTM = NOW()
           	 ,	CHG_ID = #{G_USR_CD}
		WHERE MSG_CD = #{MSG_CD}  	
		
	</update>
	   
   <!-- 메시지 관리 : 삭제 -->
   <delete id="D_handleMsgCdList" parameterType="java.util.HashMap" >
      DELETE   FROM TBL_SYS_CMN_MSG_CD  
      WHERE   MSG_CD = #{MSG_CD}
   </delete>

 </mapper>